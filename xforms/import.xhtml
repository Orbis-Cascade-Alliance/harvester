<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:dcterms="http://purl.org/dc/terms/" xmlns:oai="http://www.openarchives.org/OAI/2.0/" xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
	xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:res="http://www.w3.org/2005/sparql-results#" xmlns:edm="http://www.europeana.eu/schemas/edm/"
	xmlns:skos="http://www.w3.org/2004/02/skos/core#" xmlns:harvester="https://github.com/Orbis-Cascade-Alliance/harvester">
	<head>
		<title>Orbis Cascade Harvester: Batch Import</title>
		<link rel="stylesheet" href="/fr/style/bootstrap/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="/fr/style/form-runner-bootstrap-override.css" type="text/css" />
		<link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" />
		<script type="text/javascript" src="https://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
		<link rel="shortcut icon" href="/ops/images/orbeon-icon-16.ico" />
		<link rel="icon" href="/ops/images/orbeon-icon-16.png" type="image/png" />
		<script type="text/javascript" src="/apps/harvester/xforms/javascript/get_record.js"></script>
		<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Gentium+Book+Basic:400,700" />
		<link rel="stylesheet" href="/apps/harvester/xforms/css/style.css" />

		<xforms:model>
			<xforms:instance id="control-instance" xxforms:exclude-result-prefixes="#all">
				<controls xmlns="">
					<status></status>
					<error></error>
					<id></id>
					<current></current>
					<action></action>
					<validate-trigger>false</validate-trigger>
					<remediation-page-trigger>false</remediation-page-trigger>
					<validation-page-trigger>false</validation-page-trigger>
					<enrichment-page-trigger>false</enrichment-page-trigger>
					<repository></repository>
					<oai-service></oai-service>
					<oai-set-code></oai-set-code>
					<sparql-service></sparql-service>
					<admin>false</admin>
					<initial-page>true</initial-page>
					<uri></uri>
					<search-results></search-results>
					<definition></definition>
					<remediation>
						<rights>false</rights>
						<type>false</type>
						<genre>false</genre>
						<language>false</language>
						<format>false</format>
					</remediation>
					<normalization current-interface="">
						<types>true</types>
						<agents>true</agents>
						<places>false</places>
					</normalization>
					<interfaces>
						<setup current="true" return="false"></setup>
						<editing current="false" return="false"></editing>
						<enriching current="false" return="false"></enriching>
						<preview current="false" return="false"></preview>
						<contribute current="false" return="false"></contribute>
					</interfaces>
					<validation>
						<error-count>0</error-count>
						<total-count>0</total-count>
						<min-pos>1</min-pos>
						<max-pos>50</max-pos>
					</validation>
					<vocabs>
						<scheme></scheme>
						<type></type>
					</vocabs>
				</controls>
			</xforms:instance>

			<xforms:instance id="set" xxforms:exclude-result-prefixes="#all">
				<set xmlns="">
					<set></set>
					<repository></repository>
					<rights></rights>
					<rightsText></rightsText>
					<language></language>
					<format></format>
					<type></type>
					<genre></genre>
					<target>both</target>
				</set>
			</xforms:instance>

			<xforms:instance id="config" xxforms:exclude-result-prefixes="#all">
				<xi:include href="../config.xml"/>
			</xforms:instance>

			<!-- instances for controlled lists -->
			<xforms:instance id="rights-statements">
				<rights xmlns="">
					<statement value="InC">In Copyright</statement>
					<statement value="InC-OW-EU">In Copyright - EU orphan work</statement>
					<statement value="InC-EDU">In Copyright - Educational use permitted</statement>
					<statement value="InC-NC">In Copyright - Non-commercial use permitted</statement>
					<statement value="InC-RUU">In Copyright - Rights-holder(s) unlocatable or unidentifiable</statement>
					<statement value="NoC-CR">No Copyright - Contractual restrictions</statement>
					<statement value="NoC-NC">No Copyright - Non-commercial use only</statement>
					<statement value="NoC-OKLR">No Copyright - Other known legal restrictions</statement>
					<statement value="NoC-US">No Copyright - United States</statement>
					<statement value="CNE">Copyright not evaluated</statement>
					<statement value="UND">Copyright undetermined</statement>
					<statement value="NKC">No known copyright</statement>
				</rights>
			</xforms:instance>

			<xforms:instance id="dcmi-types">
				<types xmlns="">
					<type value="Collection">Collection</type>
					<type value="Dataset">Dataset</type>
					<type value="Event">Event</type>
					<type value="Image">Image</type>
					<type value="InteractiveResource">Interactive Resource</type>
					<type value="MovingImage">Moving Image</type>
					<type value="PhysicalObject">Physical Object</type>
					<type value="Service">Service</type>
					<type value="Software">Software</type>
					<type value="Sound">Sound</type>
					<type value="StillImage">Still Image</type>
					<type value="Text">Text</type>
				</types>
			</xforms:instance>

			<xforms:instance id="formats">
				<formats xmlns="">
					<format>application/msword</format>
					<format>application/pdf</format>
					<format>application/vnd.ms-excel</format>
					<format>application/vnd.ms-powerpoint</format>
					<format>audio/aiff</format>
					<format>audio/flac</format>
					<format>audio/mp4</format>
					<format>audio/mpeg</format>
					<format>audio/wav</format>
					<format>audio/wma</format>
					<format>audio/x-realaudio</format>
					<format>image/gif</format>
					<format>image/jp2</format>
					<format>image/jpeg</format>
					<format>image/png</format>
					<format>image/tiff</format>
					<format>image/vnd.adobe.photoshop</format>
					<format>image/vnd.djvu</format>
					<format>text/css</format>
					<format>text/csv</format>
					<format>text/plain</format>
					<format>text/html</format>
					<format>text/rtf</format>
					<format>text/xml</format>
					<format>video/avi</format>
					<format>video/mjp2</format>
					<format>video/mp4</format>
					<format>video/mpeg</format>
					<format>video/quicktime</format>
					<format>video/wmv</format>
					<format>video/x-flv</format>
					<format>video/x-realvideo</format>
				</formats>
			</xforms:instance>

			<xforms:instance id="languages" src="oxf:/apps/harvester/xforms/instances/languages.xml"/>

			<!-- instances for REST interactions -->
			<xforms:instance id="oai-response" xxforms:exclude-result-prefixes="#all">
				<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"/>
			</xforms:instance>

			<xforms:instance id="oai-set" xxforms:exclude-result-prefixes="#all">
				<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"/>
			</xforms:instance>

			<xforms:instance id="oai-record" xxforms:exclude-result-prefixes="#all">
				<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"/>
			</xforms:instance>

			<xforms:instance id="validation" xxforms:exclude-result-prefixes="#all">
				<validation xmlns=""></validation>
			</xforms:instance>

			<xforms:instance id="rdf" xxforms:exclude-result-prefixes="#all">
				<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/"
					xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:ore="http://www.openarchives.org/ore/terms/"
					xmlns:xsd="http://www.w3.org/2001/XMLSchema#" xmlns:edm="http://www.europeana.eu/schemas/edm/" xmlns:dpla="http://dp.la/terms/"
					xmlns:foaf="http://xmlns.com/foaf/0.1/" xmlns:skos="http://www.w3.org/2004/02/skos/core#"/>
			</xforms:instance>

			<xforms:instance id="set-rdf" xxforms:exclude-result-prefixes="#all">
				<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/"
					xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:ore="http://www.openarchives.org/ore/terms/"
					xmlns:xsd="http://www.w3.org/2001/XMLSchema#" xmlns:edm="http://www.europeana.eu/schemas/edm/" xmlns:dpla="http://dp.la/terms/"
					xmlns:foaf="http://xmlns.com/foaf/0.1/" xmlns="">

					<dcmitype:Collection rdf:about="">
						<dcterms:title/>
						<dcterms:publisher rdf:resource=""/>
					</dcmitype:Collection>
				</rdf:RDF>
			</xforms:instance>

			<xforms:instance id="set-description-template" xxforms:exclude-result-prefixes="#all">
				<dcterms:description xmlns=""/>
			</xforms:instance>

			<!-- sparql update -->
			<xforms:instance id="sparqlUpdate-templates">
				<queries xmlns="">
					<query id="delete-set"><![CDATA[ PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX edm:	<http://www.europeana.eu/schemas/edm/>
PREFIX prov:	<http://www.w3.org/ns/prov#>
PREFIX dcmitype:	<http://purl.org/dc/dcmitype/>
DELETE {?s ?p ?o} WHERE { 
{?agg prov:wasDerivedFrom <SET> ;
    edm:preview ?s . ?s ?p ?o}
UNION {?agg prov:wasDerivedFrom <SET> ;
    edm:object ?s . ?s ?p ?o}
UNION {?s dcterms:isPartOf <SET> . ?s ?p ?o }
UNION {?s prov:wasDerivedFrom <SET> . ?s ?p ?o }
UNION {<SET> a dcmitype:Collection . ?s ?p ?o . FILTER (?s = <SET>)}
}]]></query>
					<query id="delete-vocab"><![CDATA[PREFIX rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
DELETE {?s ?p ?o} WHERE { 
?s ?p ?o . FILTER (?s = <URI>)
}]]></query>
					<query id="insert-vocab"><![CDATA[PREFIX rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX dcam:	<http://purl.org/dc/dcam/>
PREFIX edm:	<http://www.europeana.eu/schemas/edm/>
PREFIX xsd:	<http://www.w3.org/2001/XMLSchema#>
PREFIX rdfs:	<http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos:	<http://www.w3.org/2004/02/skos/core#>
INSERT DATA
{
  <URI> rdf:type skos:Concept ; 
  		rdfs:label "LABEL" ;
  		dcterms:source "REPO" ;
  		skos:exactMatch <MATCH> ;
  		dcam:memberOf <http://vocabs.getty.edu/aat/>
}]]></query>
				</queries>
			</xforms:instance>

			<xforms:instance id="sparqlQuery-templates">
				<queries xmlns="">
					<query id="get-vocabs"><![CDATA[PREFIX rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX dcam:	<http://purl.org/dc/dcam/>
PREFIX edm:	<http://www.europeana.eu/schemas/edm/>
PREFIX xsd:	<http://www.w3.org/2001/XMLSchema#>
PREFIX rdfs:	<http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos:	<http://www.w3.org/2004/02/skos/core#>

SELECT ?label ?uri WHERE {
?s dcterms:source "REPO" ;
rdf:type TYPE;
skos:exactMatch ?uri ;
rdfs:label ?label
}]]></query>
					<query id="query-getty"><![CDATA[PREFIX gvp: <http://vocab.getty.edu/ontology#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX luc: <http://www.ontotext.com/owlim/lucene#>
PREFIX aat: <http://vocab.getty.edu/aat/>
SELECT ?c ?label ?def WHERE {
?c a gvp:Concept ;
skos:inScheme aat: ;
gvp:prefLabelGVP/xl:literalForm ?label ;
luc:term "SEARCH_QUERY" FILTER langMatches(lang(?label), "en")
OPTIONAL {?c skos:scopeNote ?note .
?note rdf:value ?def FILTER langMatches(lang(?def), "en")}} LIMIT 20]]>
					</query>
				</queries>
			</xforms:instance>

			<xforms:instance id="sparqlQuery">
				<query></query>
			</xforms:instance>

			<xforms:instance id="sparqlUpdate">
				<query></query>
			</xforms:instance>

			<xforms:instance id="sparqlResponse" xxforms:exclude-result-prefixes="#all">
				<sparql xmlns="http://www.w3.org/2005/sparql-results#"/>
			</xforms:instance>

			<xforms:instance id="search-query">
				<query></query>
			</xforms:instance>

			<!-- lists for controlled vocabulary normalization -->
			<xforms:instance id="type-list">
				<types repository="" xmlns=""></types>
			</xforms:instance>

			<xforms:instance id="place-list">
				<places repository="" xmlns=""></places>
			</xforms:instance>

			<xforms:instance id="agent-list">
				<agents repository="" xmlns=""></agents>
			</xforms:instance>

			<!-- RDF templates -->
			<xforms:instance id="concept-template" xxforms:exclude-result-prefixes="#all">
				<skos:Concept rdf:about="">
					<skos:prefLabel xml:lang="en"/>
				</skos:Concept>
			</xforms:instance>

			<xforms:instance id="agent-template" xxforms:exclude-result-prefixes="#all">
				<edm:Agent rdf:about="">
					<skos:prefLabel xml:lang="en"/>
				</edm:Agent>
			</xforms:instance>

			<!-- lists of existing vocabularies -->
			<xforms:instance id="type-vocabs" xxforms:exclude-result-prefixes="#all">
				<sparql xmlns="http://www.w3.org/2005/sparql-results#"/>
			</xforms:instance>

			<xforms:instance id="place-vocabs" xxforms:exclude-result-prefixes="#all">
				<sparql xmlns="http://www.w3.org/2005/sparql-results#"/>
			</xforms:instance>

			<xforms:instance id="agent-vocabs" xxforms:exclude-result-prefixes="#all">
				<sparql xmlns="http://www.w3.org/2005/sparql-results#"/>
			</xforms:instance>

			<!-- getty vocabs -->
			<xforms:instance id="getty-response" xxforms:exclude-result-prefixes="#all">
				<sparql xmlns="http://www.w3.org/2005/sparql-results#"/>
			</xforms:instance>

			<!-- dump instance -->
			<xforms:instance id="dump" xxforms:exclude-result-prefixes="#all">
				<dump xmlns=""></dump>
			</xforms:instance>

			<!-- test instances for vocabs -->
			<xforms:instance id="test">
				<type uri="http://vocab.getty.edu/aat/300026867">Clippings</type>
			</xforms:instance>

			<!-- download CSV -->
			<xforms:instance id="csv">
				<csv xmlns=""></csv>
			</xforms:instance>

			<xforms:instance id="csv-download">
				<csv xmlns=""></csv>
			</xforms:instance>

			<!-- ************************* BINDINGS ************************** -->
			<xforms:bind nodeset="instance('set')">
				<xforms:bind nodeset="set" required="true()" type="xs:anyURI" constraint="matches(., 'https?://')"/>
				<xforms:bind nodeset="repository" required="true()" readonly="instance('control-instance')/admin = false()"/>
			</xforms:bind>

			<xforms:bind nodeset="instance('control-instance')">
				<xforms:bind nodeset="admin" type="xs:boolean"/>
				<xforms:bind nodeset="initial-page" type="xs:boolean"/>
				<xforms:bind id="validate-trigger" nodeset="validate-trigger" type="xs:boolean" readonly=". != true()"/>
				<xforms:bind id="remediation-page-trigger" nodeset="remediation-page-trigger" type="xs:boolean" readonly=". != true()"/>
				<xforms:bind id="validation-page-trigger" nodeset="validation-page-trigger" type="xs:boolean" readonly=". != true()"/>
				<xforms:bind id="enrichment-page-trigger" nodeset="enrichment-page-trigger" type="xs:boolean" readonly=". != true()"/>
				<xforms:bind nodeset="normalization">
					<xforms:bind nodeset="*" type="xs:boolean"/>
				</xforms:bind>
				<xforms:bind nodeset="remediation">
					<xforms:bind nodeset="*" type="xs:boolean"/>
				</xforms:bind>
				<xforms:bind nodeset="validation">
					<xforms:bind nodeset="*" type="xs:integer"/>
				</xforms:bind>
				<xforms:bind nodeset="interfaces">
					<xforms:bind nodeset="setup" id="setup-page" readonly="@current = false() and @return = false()">
						<xforms:bind nodeset="@current" type="xs:boolean"/>
						<xforms:bind nodeset="@return" type="xs:boolean"/>
					</xforms:bind>
					<xforms:bind nodeset="editing" id="editing-page" readonly="@current = false() and @return = false()">
						<xforms:bind nodeset="@current" type="xs:boolean"/>
						<xforms:bind nodeset="@return" type="xs:boolean"/>
					</xforms:bind>
					<xforms:bind nodeset="enriching" id="enriching-page" readonly="@current = false() and @return = false()">
						<xforms:bind nodeset="@current" type="xs:boolean"/>
						<xforms:bind nodeset="@return" type="xs:boolean"/>
					</xforms:bind>
					<xforms:bind nodeset="preview" id="preview-page" readonly="@current = false() and @return = false()">
						<xforms:bind nodeset="@current" type="xs:boolean"/>
						<xforms:bind nodeset="@return" type="xs:boolean"/>
					</xforms:bind>
					<xforms:bind nodeset="contribute" id="contribute-page" readonly="@current = false() and @return = false()">
						<xforms:bind nodeset="@current" type="xs:boolean"/>
						<xforms:bind nodeset="@return" type="xs:boolean"/>
					</xforms:bind>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('type-list')">
				<xforms:bind nodeset="type">
					<xforms:bind nodeset="@new" type="xs:boolean"/>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('agent-list')">
				<xforms:bind nodeset="agent">
					<xforms:bind nodeset="@new" type="xs:boolean"/>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('place-list')">
				<xforms:bind nodeset="place">
					<xforms:bind nodeset="@new" type="xs:boolean"/>
				</xforms:bind>
			</xforms:bind>

			<!--<setup current="true()" return="false()"></setup>
			<editing current="false()" return="true()"></editing>
			<enriching current="false()" return="true()"/>
			<preview current="false()" return="true()"/>
			<contribute current="false()" return="true()"/>-->

			<xforms:bind nodeset="instance('csv-download')" type="xs:base64Binary"/>

			<!-- ************************* SUBMISSIONS ************************** -->
			<!-- get OAI-PMH feed, perform validation, and return the count (iterating through resumptionTokens if necessary -->
			<xforms:submission id="get-oai-pmh" serialization="none" method="get" action="{instance('control-instance')/oai-service}" replace="instance"
				instance="oai-response">
				<xforms:header>
					<xforms:name>User-Agent</xforms:name>
					<xforms:value>XForms/harvester.orbiscascade.org</xforms:value>
				</xforms:header>

				<!-- if the OAI-PMH feed errors, that means it is invalid XML -->
				<xforms:action ev:event="xforms-submit-error">
					<xforms:insert context="instance('validation')" origin="xforms:element('error', 'OAI-PMH URL does not yield a well-formed XML document')"/>
				</xforms:action>
				<!-- if the XForms submission is successful (well-formed XML document), then verify the namespace of the root element -->
				<xforms:action ev:event="xforms-submit-done">
					<xforms:action if="not(instance('oai-response')/namespace-uri()='http://www.openarchives.org/OAI/2.0/')">
						<xforms:insert context="instance('validation')"
							origin="xforms:element('error', 'URL yields an XML document, but it is not in the OAI-PMH namespace')"/>
					</xforms:action>
					<xforms:action if="instance('oai-response')/namespace-uri()='http://www.openarchives.org/OAI/2.0/'">
						<!-- iterate through all harvestable records -->
						<xforms:action xxforms:iterate="instance('oai-response')/descendant::oai:record[not(oai:header/@status = 'deleted')]">
							<xforms:var name="id" select="context()/oai:header/oai:identifier"/>
							<xforms:insert context="instance('validation')" nodeset="./child::node()[last()]"
								origin="xforms:element('record', xforms:attribute('id', $id))"/>

							<xforms:var name="binding" select="context()/oai:metadata/*"/>
							<xforms:var name="cho_uri"
								select="data(descendant::dc:identifier[matches(., 'https?://') and not(matches(., 'https?://kaga')) and not(matches(., '\.(jpe?g|tif|pdf)$', 'i'))][1])"/>

							<!-- process valid CHOs by means of validating the URI -->
							<xforms:action if="string($cho_uri)">
								<!-- insert some basic metadata for human-readable validation -->
								<xforms:insert context="instance('validation')/record[last()]" origin="xforms:element('uri', $cho_uri)"/>
								<xforms:insert context="instance('validation')/record[last()]" origin="xforms:element('title', data($binding/dc:title))"
									if="$binding/dc:title"/>
								<!--<xforms:insert context="instance('validation')/record[last()]" origin="xforms:element('date', string-join($binding/dc:date, ';'))"
									if="$binding/dc:date"/>
								<xforms:insert context="instance('validation')/record[last()]" origin="xforms:element('rights', string-join($binding/dc:rights, ';'))"
									if="$binding/dc:rights"/>-->
								
								<!-- insert errors for invalid or missing fields -->
								<xforms:insert context="instance('validation')/record[last()]" origin="xforms:element('error', 'No title')"
									if="not($binding/dc:title)"/>
								<xforms:insert context="instance('validation')/record[last()]" origin="xforms:element('error', 'No date elements')"
									if="not($binding/dc:date)"/>

								<!-- parse and insert entities into relevant lists, if applicable -->
								<!-- types/genres: normalize to AAT -->
								<xforms:action if="instance('control-instance')/normalization/types = true()">
									<xforms:var name="all-elements" select="string-join($binding/dc:type, ';')"/>
									<xforms:var name="types" select="tokenize($all-elements, ';')"/>
									<xforms:var name="dcmi-types"
										select="('collection','dataset','event','image','interactiveresource','movingimage','physicalobject','service','software','sound','stillimage','text')"/>
									
									<xforms:action xxforms:iterate="$types">
										<xforms:var name="val"
											select="if (substring(normalize-space(.), string-length(normalize-space(.)), 1) = '.') then substring(normalize-space(.), 1, string-length(normalize-space(.)) - 1) else normalize-space(.)"/>
										
										<xforms:action if="string-length($val) &gt; 0">
											<!-- insert only distinct values and if they aren't valid DCMI Types -->
											<xforms:action if="not(instance('type-list')/type = $val) and not(index-of($dcmi-types, lower-case($val)))">
												<xforms:action if="instance('type-vocabs')//res:result[res:binding[@name='label']/res:literal = $val]">
													<xforms:var name="uri"
														select="instance('type-vocabs')//res:result[res:binding[@name='label']/res:literal = $val]/res:binding[@name='uri']/res:uri"/>
													<xforms:insert context="instance('type-list')" nodeset="./child::node()[last()]"
														origin="xforms:element('type', (xforms:attribute('uri', $uri), xforms:attribute('new', false()), xforms:attribute('prefLabel', ''), $val))"
														if="not(instance('type-list')/agent = $val)"/>
												</xforms:action>
												<xforms:action if="not(instance('type-vocabs')//res:result[res:binding[@name='label']/res:literal = $val])">
													<xforms:insert context="instance('type-list')" nodeset="./child::node()[last()]"
														origin="xforms:element('type', (xforms:attribute('uri', ''), xforms:attribute('new', true()), xforms:attribute('prefLabel', ''), $val))"
														if="not(instance('type-list')/agent = $val)"/>
												</xforms:action>
											</xforms:action>
											
											<!-- insert DCMI Type into validation results -->
											<!--<xforms:action if="index-of($dcmi-types, lower-case($val))">
												<xforms:insert context="instance('validation')/record[last()]" origin="xforms:element('dcmitype', $val)"/>
											</xforms:action>-->
										</xforms:action>
									</xforms:action>
								</xforms:action>
								<!-- extract DCMI Types -->
								<!--<xforms:action if="not(instance('control-instance')/normalization/types = true())">
									<xforms:var name="all-elements" select="string-join($binding/dc:type, ';')"/>
									<xforms:var name="types" select="tokenize($all-elements, ';')"/>
									<xforms:var name="dcmi-types"
										select="('collection','dataset','event','image','interactiveresource','movingimage','physicalobject','service','software','sound','stillimage','text')"/>
									
									<xforms:action xxforms:iterate="$types">
										<xforms:var name="val"
											select="if (substring(normalize-space(.), string-length(normalize-space(.)), 1) = '.') then substring(normalize-space(.), 1, string-length(normalize-space(.)) - 1) else normalize-space(.)"/>
										
										<xforms:action if="string-length($val) &gt; 0">
											<xforms:action if="index-of($dcmi-types, lower-case($val))">
												<xforms:insert context="instance('validation')/record[last()]" origin="xforms:element('dcmitype', $val)"/>
											</xforms:action>
										</xforms:action>
									</xforms:action>
								</xforms:action>-->

								<!-- agents -->
								<xforms:action if="instance('control-instance')/normalization/agents = true()">
									<xforms:var name="all-elements" select="string-join($binding/dc:creator|$binding/dc:contributor, ';')"/>

									<xforms:var name="agents" select="tokenize($all-elements, ';')"/>

									<xforms:action xxforms:iterate="$agents">
										<xforms:var name="val" select="normalize-space(.)"/>

										<xforms:action if="string-length($val) &gt; 0">
											<!-- ignore unknowns -->
											<xforms:action if="not(contains(lower-case($val), 'unknown'))">
												<xforms:action if="instance('agent-vocabs')//res:result[res:binding[@name='label']/res:literal = $val]">
													<xforms:var name="uri"
														select="instance('agent-vocabs')//res:result[res:binding[@name='label']/res:literal = $val]/res:binding[@name='uri']/res:uri"/>
													<xforms:insert context="instance('agent-list')" nodeset="./child::node()[last()]"
														origin="xforms:element('agent', (xforms:attribute('uri', $uri), xforms:attribute('new', false()), xforms:attribute('prefLabel', ''), $val))"
														if="not(instance('agent-list')/agent = $val)"/>
												</xforms:action>
												<xforms:action if="not(instance('agent-vocabs')//res:result[res:binding[@name='label']/res:literal = $val])">
													<xforms:insert context="instance('agent-list')" nodeset="./child::node()[last()]"
														origin="xforms:element('agent', (xforms:attribute('uri', ''), xforms:attribute('new', true()), xforms:attribute('prefLabel', ''), $val))"
														if="not(instance('agent-list')/agent = $val)"/>
												</xforms:action>
											</xforms:action>
										</xforms:action>
									</xforms:action>
								</xforms:action>

								<!-- coverage and spatial, but ignoring coordinates -->
								<xforms:action if="instance('control-instance')/normalization/places = true()">
									<xforms:var name="all-elements" select="string-join($binding/*:coverage|$binding/*:spatial, ';')"/>

									<xforms:var name="places" select="tokenize($all-elements, ';')"/>

									<xforms:action xxforms:iterate="$places">
										<xforms:var name="val"
											select="if (substring(normalize-space(.), string-length(normalize-space(.)), 1) = '.') then substring(normalize-space(.), 1, string-length(normalize-space(.)) - 1) else normalize-space(.)"/>

										<xforms:action if="string-length($val) &gt; 0">
											<!-- ignore individual lat or long elements and elements conforming to "lat,long" formatting -->
											<xforms:action if="not($val castable as xs:decimal) and not(matches($val, '-?\d+\.\d+,\s?-?\d+\.\d+'))">
												<xforms:action if="instance('place-vocabs')//res:result[res:binding[@name='label']/res:literal = $val]">
													<xforms:var name="uri"
														select="instance('place-vocabs')//res:result[res:binding[@name='label']/res:literal = $val]/res:binding[@name='uri']/res:uri"/>
													<xforms:insert context="instance('place-list')" nodeset="./child::node()[last()]"
														origin="xforms:element('place', (xforms:attribute('uri', $uri), xforms:attribute('new', false()), xforms:attribute('prefLabel', ''), $val))"
														if="not(instance('place-list')/agent = $val)"/>
												</xforms:action>
												<xforms:action if="not(instance('place-vocabs')//res:result[res:binding[@name='label']/res:literal = $val])">
													<xforms:insert context="instance('place-list')" nodeset="./child::node()[last()]"
														origin="xforms:element('place', (xforms:attribute('uri', ''), xforms:attribute('new', true()), xforms:attribute('prefLabel', ''), $val))"
														if="not(instance('place-list')/agent = $val)"/>
												</xforms:action>
											</xforms:action>
										</xforms:action>
									</xforms:action>
								</xforms:action>
							</xforms:action>

							<!-- throw error for invalid URIs -->
							<xforms:action if="not(string($cho_uri))">
								<xforms:insert context="instance('validation')/record[last()]"
									origin="xforms:element('error', concat('ID ', $id, ' - no discernable URI'))"/>
							</xforms:action>
						</xforms:action>

						<!-- populate total and error count -->
						<xforms:setvalue ref="instance('control-instance')/validation/total-count" value="count(instance('validation')/record)"/>
						<xforms:setvalue ref="instance('control-instance')/validation/error-count" value="count(instance('validation')/record[error])"/>

						<xforms:action if="instance('control-instance')/validation/error-count &gt; 0">
							<xforms:insert nodeset="instance('csv')"
								origin="xxforms:call-xpl('oxf:/apps/harvester/xpl/xforms/errors-to-csv.xpl', 'data', instance('validation'), 'data')"/>
							<xforms:setvalue ref="instance('csv-download')"
								value="saxon:string-to-base64Binary(saxon:serialize(instance('csv'), 'text'), 'UTF-8')"/>
						</xforms:action>


						<!-- for a multipage feed, check for the existence of a resumptionToken for iteration -->
						<!--<xforms:action if="instance('feed')//oai:resumptionToken">
							<xforms:setvalue ref="instance('control-instance')/set"
								value="concat(instance('feed')//descendant::oai:request, '?verb=ListRecords&amp;resumptionToken=', instance('feed')//descendant::oai:resumptionToken)"/>
							<xforms:send submission="get-set"/>
						</xforms:action>-->
					</xforms:action>
				</xforms:action>
			</xforms:submission>

			<!-- parse set metadata -->
			<xforms:submission id="get-oai-set" serialization="none" method="get" action="{instance('control-instance')/oai-service}" replace="instance"
				instance="oai-set">
				<xforms:header>
					<xforms:name>User-Agent</xforms:name>
					<xforms:value>XForms/harvester.orbiscascade.org</xforms:value>
				</xforms:header>

				<!-- if the OAI-PMH feed errors, that means it is invalid XML -->
				<xforms:action ev:event="xforms-submit-error">
					<xforms:setvalue ref="instance('control-instance')/error">Unable to parse the OAI-PMH response for ListSets</xforms:setvalue>
				</xforms:action>

				<!-- validate the set response-->
				<xforms:action ev:event="xforms-submit-done">
					<xforms:var name="setSpec" select="instance('control-instance')/oai-set-code"/>

					<xforms:action if="not(instance('oai-set')//oai:set[oai:setSpec = $setSpec])">
						<!-- if there is no metadata matching the set code, throw an error -->
						<xforms:setvalue ref="instance('control-instance')/error" value=" concat('No metadata for setSpec ', $setSpec)"/>
					</xforms:action>
					<xforms:action if="instance('oai-set')//oai:set[oai:setSpec = $setSpec]">
						<!-- set Collection RDF metadata -->
						<xforms:setvalue ref="instance('set-rdf')/dcmitype:Collection/@rdf:about" value="instance('set')/set"/>
						<xforms:setvalue ref="instance('set-rdf')/dcmitype:Collection/dcterms:title"
							value="instance('oai-set')//oai:set[oai:setSpec = $setSpec]/oai:setName"/>
						<xforms:setvalue ref="instance('set-rdf')/dcmitype:Collection/dcterms:publisher/@rdf:resource"
							value="concat(instance('config')/production_server, 'contact#', instance('set')/repository)"/>
						<xforms:action if="instance('oai-set')//oai:set[oai:setSpec = $setSpec]/oai:setDescription">
							<xforms:insert context="instance('set-rdf')/dcmitype:Collection" nodeset="./child::node()[last()]"
								origin="instance('set-description-template')"/>
							<xforms:setvalue ref="instance('set-rdf')/dcmitype:Collection/dcterms:description"
								value="instance('oai-set')//oai:set[oai:setSpec = $setSpec]/oai:setDescription/descendant-or-self::text()"/>
						</xforms:action>
						<!-- set initital page to false() to ensure this submission does not repeat for every OAI-PMH page -->
						<xforms:setvalue ref="instance('control-instance')/initial-page" value="false()"/>
					</xforms:action>
				</xforms:action>
			</xforms:submission>

			<!-- get the RDF through the administrative getRDF API -->
			<xforms:submission id="get-rdf" serialization="none" method="get"
				action="/harvester/admin/getRDF?sets={encode-for-uri(normalize-space(instance('set')/set))}&amp;repository={instance('set')/repository}&amp;rights={instance('set')/rights}&amp;rightsText={instance('set')/rightsText}&amp;target={instance('set')/target}&amp;genre={encode-for-uri(instance('set')/genre)}&amp;format={encode-for-uri(instance('set')/format)}&amp;language={instance('set')/language}&amp;type={instance('set')/type}"
				replace="instance" instance="rdf">
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to get RDF</xforms:message>
				<xforms:action ev:event="xforms-submit-done">
					<!-- set SPARQL service -->
					<xforms:setvalue ref="instance('control-instance')/sparql-service" value="instance('config')/sparql/store"/>

					<!-- upon successful execution of getRDF, post the RDF into the triplestore -->
					<xforms:send submission="post-rdf"/>
				</xforms:action>
			</xforms:submission>

			<!-- post RDF into the triplestore -->
			<xforms:submission id="post-rdf" action="{instance('control-instance')/sparql-service}?default" ref="instance('rdf')" replace="none" method="post"
				mediatype="application/rdf+xml">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status"
					value="concat(instance('set')/set, ': Successfully posted to endpoint.')"/>
				<xforms:message ev:event="xforms-submit-error" level="modal" value="concat(instance('set')/set, ': Failed to post to endpoint.')"/>
			</xforms:submission>

			<!-- SPARQL queries -->
			<xforms:submission id="submit-sparqlQuery"
				action="{instance('control-instance')/sparql-service}?query={encode-for-uri(instance('sparqlQuery'))}&amp;output=xml"
				ref="instance('sparqlResponse')" replace="instance" method="get">
				<xforms:message ev:event="xforms-submit-error" level="modal">SPARQL query failed.</xforms:message>

				<xforms:action ev:event="xforms-submit-done">
					<!-- if there's an action, then move the results into the appropriate vocabulary list -->
					<xforms:action if="instance('control-instance')/action = 'type'">
						<xforms:insert context="instance('type-vocabs')" origin="instance('sparqlResponse')/res:results"/>
					</xforms:action>
					<xforms:action if="instance('control-instance')/action = 'place'">
						<xforms:insert context="instance('place-vocabs')" origin="instance('sparqlResponse')/res:results"/>
					</xforms:action>
					<xforms:action if="instance('control-instance')/action = 'agent'">
						<xforms:insert context="instance('agent-vocabs')" origin="instance('sparqlResponse')/res:results"/>
					</xforms:action>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="update-graph" action="{instance('control-instance')/sparql-service}" ref="instance('sparqlUpdate')"
				serialization="text/plain" replace="none" method="post" mediatype="application/sparql-update">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">SPARQL update failed.</xforms:message>
				</xforms:action>
			</xforms:submission>

			<!-- query the getty vocabularies for genres -->
			<xforms:submission id="query-getty" action="http://vocab.getty.edu/sparql?query={encode-for-uri(instance('sparqlQuery'))}"
				ref="instance('getty-response')" replace="instance" method="get">
				<xforms:header>
					<xforms:name>User-Agent</xforms:name>
					<xforms:value>XForms/harvester.orbiscascade.org</xforms:value>
				</xforms:header>
				<xforms:header>
					<xforms:name>Accept</xforms:name>
					<xforms:value>application/sparql-results+xml</xforms:value>
				</xforms:header>
				<xforms:message ev:event="xforms-submit-error" level="modal">
					<!--SPARQL query failed.-->
					<xforms:output value="event('response-headers')"/>
				</xforms:message>
				<!-- set the search results text -->
				<xforms:action ev:event="xforms-submit-done">
					<xforms:var name="total" select="count(instance('getty-response')//res:result)"/>
					<xforms:setvalue if="$total = 0" ref="instance('control-instance')/search-results)">No results found for query.</xforms:setvalue>
					<xforms:setvalue if="$total &gt; 0 and $total &lt;= 20" ref="instance('control-instance')/search-results)"
						value="concat('Displaying ', $total, ' result(s).')"/>
					<xforms:setvalue if="$total &gt; 20" ref="instance('control-instance')/search-results)"
						value="concat('Displaying first 20 of ', $total, ' result(s).')"/>
				</xforms:action>
			</xforms:submission>

			<!-- **************** DYNAMIC VALIDATION CONTROLS ********************** -->
			<xforms:action ev:event="xxforms-invalid" ev:observer="set">
				<xforms:setvalue ref="instance('control-instance')/remediation-page-trigger" value="false()"/>
				<xforms:setvalue ref="instance('control-instance')/validation-page-trigger" value="false()"/>
				<xforms:setvalue ref="instance('control-instance')/enrichment-page-trigger" value="false()"/>
				<xforms:setvalue ref="instance('control-instance')/validate-trigger" value="false()"/>
			</xforms:action>

			<xforms:action ev:event="xxforms-valid" ev:observer="set">
				<xforms:setvalue ref="instance('control-instance')/remediation-page-trigger" value="true()"/>
				<xforms:setvalue ref="instance('control-instance')/validation-page-trigger" value="true()"/>
				<xforms:setvalue ref="instance('control-instance')/enrichment-page-trigger" value="true()"/>
				<xforms:setvalue ref="instance('control-instance')/validate-trigger" value="true()"/>
			</xforms:action>

			<!-- ************************* XFORMS-MODEL-CONSTRUCT-DONE ************************** -->
			<xforms:action ev:event="xforms-model-construct-done">
				<xforms:setvalue ref="instance('control-instance')/admin" value="xxforms:is-user-in-role('harvester-admin')"/>

				<!-- set repo information if not harvester-admin -->
				<xforms:action if="xxforms:is-user-in-role('harvester-admin') = false()">
					<xforms:insert context="instance('control-instance')" nodeset="status" position="after"
						origin="xxforms:call-xpl('oxf:/apps/harvester/xpl/get-authentication.xpl', 'dump', instance('dump'), 'data')"/>
					<xforms:setvalue ref="instance('set')/repository" value="instance('control-instance')/request-security/role"/>

					<xforms:setvalue ref="instance('type-list')/@repository" value="instance('set')/repository"/>
					<xforms:setvalue ref="instance('agent-list')/@repository" value="instance('set')/repository"/>
					<xforms:setvalue ref="instance('place-list')/@repository" value="instance('set')/repository"/>
				</xforms:action>
			</xforms:action>
		</xforms:model>

		<!-- include XBL -->
		<xi:include href="xbl/type/type.xbl" xi:omit-xml-base="true"/>
		<xi:include href="xbl/agent/agent.xbl" xi:omit-xml-base="true"/>
		<xi:include href="xbl/place/place.xbl" xi:omit-xml-base="true"/>
	</head>


	<body style="font-family:'Gentium Book Basic'">
		<div class="container">
			<div class="row">
				<div class="col-md-12">
					<!--<xforms:group ref=".[string-length(instance('control-instance')/status) &gt; 0]">
						<div class="bg-info alert-box">
							<p>
								<span class="glyphicon glyphicon-info-sign"></span>
								<strong>Status:</strong>
								<xforms:output ref="instance('control-instance')/status"/>
							</p>
						</div>
					</xforms:group>-->
					<xforms:group ref=".[string-length(instance('control-instance')/error) &gt; 0]">
						<div class="bg-danger alert-box">
							<span class="glyphicon glyphicon-exclamation-sign"></span>
							<strong>Alert:</strong>
							<xforms:output ref="instance('control-instance')/error"/>. </div>
					</xforms:group>
				</div>
			</div>

			<!-- navigation -->
			<div class="row">
				<div class="col-md-6 banner">
					<img src="/apps/harvester/ui/images/header.jpg" style="max-height:100%" alt="header-image"/>
				</div>
				<div class="col-md-6 banner">
					<h1>HARVESTER</h1>
				</div>
				<div class="col-md-12">
					<xforms:group ref="instance('control-instance')/interfaces">
						<ul class="navigation list-inline" style="margin:10px 0; padding-top:10px">

							<li>
								<xforms:group ref=".[setup/@current=true() or setup/@return = true()]">
									<xforms:trigger appearance="minimal">
										<xforms:label>Setup Options <span class="glyphicon glyphicon-chevron-right"/></xforms:label>
									</xforms:trigger>
								</xforms:group>
								<xforms:group ref=".[setup/@current=false() and setup/@return = false()]">
									<xforms:trigger appearance="minimal">
										<xforms:label>Start Over <span class="glyphicon glyphicon-repeat"/></xforms:label>
										<xforms:dispatch target="start-over-dialog" name="fr-show" ev:event="DOMActivate"/>
									</xforms:trigger>
								</xforms:group>
							</li>
							<li>
								<xforms:group ref=".[editing/@current=true() or editing/@return = true()]">
									<xforms:trigger appearance="minimal">
										<xforms:label>Editing <span class="glyphicon glyphicon-chevron-right"/></xforms:label>
										<xforms:action ev:event="DOMActivate">
											<xforms:toggle case="remediation" if=".[editing/@current=false()]"/>
											<xforms:action xxforms:iterate="instance('control-instance')/interfaces/*">
												<xforms:setvalue ref="@current" value="false()"/>
											</xforms:action>
											<xforms:setvalue ref="instance('control-instance')/interfaces/editing/@current" value="true()"/>
										</xforms:action>
									</xforms:trigger>
								</xforms:group>
								<xforms:group ref=".[editing/@current=false() and editing/@return = false()]">
									<span>Editing <span class="glyphicon glyphicon-chevron-right"/></span>
								</xforms:group>
							</li>
							<li>
								<xforms:group ref=".[enriching/@current=true() or enriching/@return = true()]">
									<xforms:trigger appearance="minimal">
										<xforms:label>Enriching <span class="glyphicon glyphicon-chevron-right"/></xforms:label>
										<xforms:action ev:event="DOMActivate">
											<!-- toggle interface -->
											<xforms:setvalue ref="instance('control-instance')/normalization/@current-interface"
												value="instance('control-instance')/normalization/*[. = true()][1]/name()"/>
											<xforms:toggle case="{instance('control-instance')/normalization/@current-interface}-normalization"/>
											<xforms:action xxforms:iterate="instance('control-instance')/interfaces/*">
												<xforms:setvalue ref="@current" value="false()"/>
											</xforms:action>
											<xforms:setvalue ref="instance('control-instance')/interfaces/enriching/@current" value="true()"/>
										</xforms:action>
									</xforms:trigger>
								</xforms:group>
								<xforms:group ref=".[enriching/@current=false() and enriching/@return = false()]">
									<span>Enriching <span class="glyphicon glyphicon-chevron-right"/></span>
								</xforms:group>
							</li>
							<li>
								<xforms:group ref=".[preview/@current=true() or preview/@return = true()]">
									<xforms:trigger appearance="minimal">
										<xforms:label>Preview Set <span class="glyphicon glyphicon-chevron-right"/></xforms:label>
										<xforms:action ev:event="DOMActivate">
											<xforms:toggle case="validation-results" if=".[preview/@current=false()]"/>
											<xforms:action xxforms:iterate="instance('control-instance')/interfaces/*">
												<xforms:setvalue ref="@current" value="false()"/>
											</xforms:action>
											<xforms:setvalue ref="instance('control-instance')/interfaces/preview/@current" value="true()"/>
										</xforms:action>
									</xforms:trigger>
								</xforms:group>
								<xforms:group ref=".[preview/@current=false() and preview/@return = false()]">
									<span>Preview Set <span class="glyphicon glyphicon-chevron-right"/></span>
								</xforms:group>
							</li>
							<li>
								<xforms:group ref=".[contribute/@current=true() or contribute/@return = true()]">
									<xforms:trigger appearance="minimal">
										<xforms:label>Contribute Set <span class="glyphicon glyphicon-chevron-right"/></xforms:label>
									</xforms:trigger>
								</xforms:group>
								<xforms:group ref=".[contribute/@current=false() and contribute/@return = false()]">
									<span>Contribute Set <span class="glyphicon glyphicon-chevron-right"/></span>
								</xforms:group>
							</li>
						</ul>
					</xforms:group>
				</div>
			</div>

			<div class="row">
				<div class="col-md-12">
					<xforms:switch>
						<xforms:case id="import-form">
							<div class="row">
								<div class="col-md-6">
									<h2>Set URL and destination(s)</h2>
								</div>
								<div class="col-md-6 text-right">
									<xforms:trigger bind="remediation-page-trigger">
										<xforms:label>CONTINUE</xforms:label>
										<xforms:action ev:event="DOMActivate">
											<!-- get set -->
											<xforms:var name="params" select="tokenize(substring-after(instance('set')/set, '?'), '&amp;')"/>
											<xforms:setvalue ref="instance('control-instance')/oai-set-code"
												value="substring-after($params[starts-with(., 'set=')][1], '=')"/>
											<xforms:setvalue ref="instance('control-instance')/oai-service"
												value="concat(substring-before(instance('set')/set, '?'), '?verb=ListSets')"/>
											<xforms:send submission="get-oai-set"/>

											<!-- update navbar -->
											<xforms:setvalue ref="instance('control-instance')/interfaces/setup/@current" value="false()"/>
											<xforms:setvalue ref="instance('control-instance')/interfaces/editing/@current" value="true()"/>

											<xforms:toggle case="remediation"/>
										</xforms:action>
									</xforms:trigger>
								</div>
							</div>
							<div class="row">
								<div class="col-md-12">
									<hr />
									<xforms:group ref="instance('set')">
										<xforms:group ref=".[xxforms:is-user-in-role('harvester-admin')]">
											<div class="subsection">
												<h4>Repository Code</h4>
												<div>
													<xforms:select1 ref="repository">
														<xforms:alert>Required</xforms:alert>
														<xforms:item>
															<xforms:label>Select...</xforms:label>
															<xforms:value/>
														</xforms:item>
														<xforms:itemset
															nodeset="xxforms:sort(distinct-values(instance('config')//repository), ., 'text', 'ascending')">
															<xforms:label ref="."/>
															<xforms:value ref="."/>
														</xforms:itemset>
														<!-- set the @repository of the controlled vocabulary lists -->
														<xforms:action ev:event="xforms-value-changed">
															<xforms:var name="val" select="."/>
															<xforms:setvalue ref="instance('type-list')/@repository" value="$val"/>
															<xforms:setvalue ref="instance('agent-list')/@repository" value="$val"/>
															<xforms:setvalue ref="instance('place-list')/@repository" value="$val"/>
														</xforms:action>
													</xforms:select1>
												</div>
											</div>
										</xforms:group>
										<div class="subsection">
											<h4>Set URL</h4>
											<p>Enter the OAI PMH request for one set.<br /> Digital Commons contributors: set the metadata prefix equal to
												simple-dublin-core<br /> All other contributors: set the metadata prefix equal to oai_dc</p>
											<div>
												<xforms:input ref="set">
													<xforms:hint>Insert URL</xforms:hint>
													<xforms:alert>Required</xforms:alert>
												</xforms:input>
											</div>
										</div>
										<div class="subsection">
											<h4>Destination(s) <small><xforms:trigger appearance="minimal"><xforms:label><span
																class="glyphicon glyphicon-info-sign"></span></xforms:label>
														<xxforms:show ev:event="DOMActivate" dialog="destination-info-dialog"/>
													</xforms:trigger></small>
											</h4>
											<p>You can contribute this set to one or both of the systems below. Select your preference:</p>
											<div>
												<xforms:select1 ref="target">
													<xforms:item>
														<xforms:label>DPLA and Primo</xforms:label>
														<xforms:value>both</xforms:value>
													</xforms:item>
													<xforms:item>
														<xforms:label>DPLA only</xforms:label>
														<xforms:value>dpla</xforms:value>
													</xforms:item>
													<xforms:item>
														<xforms:label>Primo only</xforms:label>
														<xforms:value>primo</xforms:value>
													</xforms:item>
												</xforms:select1>
											</div>
										</div>
										<div class="subsection">
											<h4>Optional Enrichment</h4>
											<p>Would you like to enrich records in this set?</p>
											<xforms:group ref="instance('control-instance')/normalization">
												<div>
													<h5>Creators/Contributors</h5>
													<xforms:select1 ref="agents" appearance="full">
														<xforms:item>
															<xforms:label>No thank you</xforms:label>
															<xforms:value value="false()"/>
														</xforms:item>
														<xforms:item>
															<xforms:label>Yes, I have addressed compliance with required fields and would like to enrich
																creators and contributors, replacing compatible strings with VIAF URIs.</xforms:label>
															<xforms:value value="true()"/>
														</xforms:item>
													</xforms:select1>
												</div>
												<div>
													<h5>Genre</h5>
													<xforms:select1 ref="types" appearance="full">
														<xforms:item>
															<xforms:label>No thank you</xforms:label>
															<xforms:value value="false()"/>
														</xforms:item>
														<xforms:item>
															<xforms:label>Yes, I have addressed compliance with required fields and would like to enrich genre
																values present in dc:type, replacing compatible strings with Getty Art and Architecture
																Thesaurus (AAT) URIs.</xforms:label>
															<xforms:value value="true()"/>
														</xforms:item>
													</xforms:select1>
												</div>
												<!-- places commented out for now -->
												<!--<div>
										<h5>Places</h4>
										<xforms:select1 ref="types" appearance="full">
											<xforms:item>
												<xforms:label>No thank you</xforms:label>
												<xforms:value value="false()"></xforms:value>
											</xforms:item>
											<xforms:item>
												<xforms:label>Yes, I have addressed compliance with required fields and would like to enrich places, replacing compatible strings with Geonames URIs.</xforms:label>
												<xforms:value value="true()"></xforms:value>
											</xforms:item>
										</xforms:select1>
									</div>-->
											</xforms:group>
										</div>
									</xforms:group>
								</div>
							</div>
							<div class="row">
								<div class="col-md-12 text-right">
									<xforms:trigger bind="remediation-page-trigger">
										<xforms:label>CONTINUE</xforms:label>
										<xforms:action ev:event="DOMActivate">
											<!-- get set -->
											<xforms:var name="params" select="tokenize(substring-after(instance('set')/set, '?'), '&amp;')"/>
											<xforms:setvalue ref="instance('control-instance')/oai-set-code"
												value="substring-after($params[starts-with(., 'set=')][1], '=')"/>
											<xforms:setvalue ref="instance('control-instance')/oai-service"
												value="concat(substring-before(instance('set')/set, '?'), '?verb=ListSets')"/>
											<xforms:send submission="get-oai-set"/>

											<!-- update navbar -->
											<xforms:setvalue ref="instance('control-instance')/interfaces/setup/@current" value="false()"/>
											<xforms:setvalue ref="instance('control-instance')/interfaces/editing/@current" value="true()"/>

											<xforms:toggle case="remediation"/>
										</xforms:action>
									</xforms:trigger>
								</div>
							</div>
						</xforms:case>
						<xforms:case id="remediation">
							<h2>Would you like to edit records in this set?</h2>
							<h3>
								<xforms:output ref="instance('oai-set')//oai:set[oai:setSpec = instance('control-instance')/oai-set-code]/oai:setName"/>
							</h3>
							<div class="row">
								<div class="col-md-6">
									<p>Use this interface to apply global genre, format, language, rights, and/or DCMI type values to all records in a set.</p>
								</div>
								<div class="col-md-6 text-right">
									<xi:include href="components/remediation-buttons.xml"/>
								</div>
							</div>
							<hr />
							<xforms:group ref="instance('control-instance')/remediation">
								<div>
									<h4>Genre</h4>
									<xforms:select1 ref="genre" appearance="full">
										<xforms:item>
											<xforms:label>I do not want to apply the same genre to every record in this set</xforms:label>
											<xforms:value value="false()"/>
										</xforms:item>
										<xforms:item>
											<xforms:label>I want to apply the same genre to all records in this set. I would like to apply:</xforms:label>
											<xforms:value value="true()"/>
										</xforms:item>
										<xforms:setvalue ref="instance('set')/genre" ev:event="xforms-value-changed"/>
									</xforms:select1>
									<xforms:group ref=".[genre = true()]">
										<div>
											<!-- display Getty AAT lookup mechanism -->
											<xforms:group ref=".[string-length(instance('set')/genre) = 0]">
												<xforms:input ref="instance('search-query')"/>
												<xforms:trigger>
													<xforms:action ev:event="DOMActivate">
														<xforms:var name="search_query" select="string-join(tokenize(instance('search-query'), ' '), ' AND ')"/>
														<xforms:setvalue ref="instance('sparqlQuery')"
															value="normalize-space(replace(instance('sparqlQuery-templates')/query[@id='query-getty'], 'SEARCH_QUERY', $search_query))"/>
														<xforms:send submission="query-getty"/>
													</xforms:action>
													<xforms:label>Search</xforms:label>
												</xforms:trigger>
												<xforms:group ref=".[string-length(instance('control-instance')/search-results)] &gt; 0">
													<p class="text-muted">
														<xforms:output ref="instance('control-instance')/search-results)"/>
													</p>
												</xforms:group>
												<xforms:group ref=".[count(instance('getty-response')//res:result) &gt; 0]">
													<xforms:select1 ref="instance('control-instance')/uri" appearance="compact" length="20">
														<xforms:label>Term</xforms:label>
														<xforms:itemset nodeset="instance('getty-response')//res:result">
															<xforms:label ref="res:binding[@name='label']/res:literal"/>
															<xforms:value ref="res:binding[@name='c']/res:uri"/>
														</xforms:itemset>

														<!-- update the scopeNote on value-changed -->
														<xforms:setvalue ref="instance('control-instance')/definition"
															value="instance('getty-response')//res:result[res:binding[@name='c']/res:uri =
															instance('control-instance')/uri]/res:binding[@name='def']/res:literal"
															ev:event="xforms-value-changed"/>
													</xforms:select1>
													<xforms:trigger>
														<xforms:label>Select</xforms:label>
														<xforms:action ev:event="DOMActivate">
															<!-- set @uri, which switches to other interface -->
															<xforms:setvalue ref="instance('set')/genre" value="instance('control-instance')/uri"/>
														</xforms:action>
													</xforms:trigger>

													<xforms:group ref="instance('control-instance')[string-length(definition) &gt; 0]">
														<div>
															<xforms:output ref="definition">
																<xforms:label>Definition</xforms:label>
															</xforms:output>
															<xforms:trigger appearance="minimal">
																<xforms:label>
																	<span class="glyphicon glyphicon-new-window"></span>
																</xforms:label>
																<xforms:hint ref="uri"/>
																<xforms:load ev:event="DOMActivate" resource="{uri}" show="new"/>
															</xforms:trigger>
														</div>
													</xforms:group>
												</xforms:group>
											</xforms:group>

											<!-- and display removal if applicable -->
											<xforms:group ref=".[string-length(instance('set')/genre) &gt; 0]">
												<xforms:trigger appearance="minimal">
													<xforms:label>
														<xforms:output ref="instance('set')/genre"/>
														<span class="glyphicon glyphicon-new-window"></span>
													</xforms:label>
													<xforms:load ev:event="DOMActivate" resource="{instance('set')/genre}" show="new"/>
												</xforms:trigger>
												<xforms:trigger appearance="minimal">
													<xforms:label>
														<span class="glyphicon glyphicon-remove"></span>
													</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<!-- set the @uri value to empty to show the lookup mechanism again and reset all relevant values -->
														<xforms:setvalue ref="instance('set')/genre"/>
														<xforms:setvalue ref="instance('control-instance')/uri"/>
														<xforms:setvalue ref="instance('control-instance')/definition"/>
														<xforms:delete nodeset="instance('getty-response')/*"/>
													</xforms:action>
												</xforms:trigger>
											</xforms:group>
										</div>
									</xforms:group>
									<hr />
								</div>
								<div>
									<h4>Format</h4>
									<xforms:select1 ref="format" appearance="full">
										<xforms:item>
											<xforms:label>I do not want to apply the same format to every record in this set</xforms:label>
											<xforms:value value="false()"/>
										</xforms:item>
										<xforms:item>
											<xforms:label>I want to apply the same format to all records in this set. I would like to apply:</xforms:label>
											<xforms:value value="true()"/>
										</xforms:item>
										<xforms:setvalue ref="instance('set')/format" ev:event="xforms-value-changed"/>
									</xforms:select1>
									<xforms:group ref=".[format = true()]">
										<div>
											<xforms:select1 ref="instance('set')/format">
												<xforms:item>
													<xforms:label>Select below...</xforms:label>
													<xforms:value/>
												</xforms:item>
												<xforms:itemset nodeset="instance('formats')//format">
													<xforms:label ref="."/>
													<xforms:value ref="."/>
												</xforms:itemset>
											</xforms:select1>
										</div>
									</xforms:group>
									<hr />
								</div>
								<div>
									<h4>Language</h4>
									<xforms:select1 ref="language" appearance="full">
										<xforms:item>
											<xforms:label>I do not want to apply the same language to every record in this set</xforms:label>
											<xforms:value value="false()"/>
										</xforms:item>
										<xforms:item>
											<xforms:label>I want to apply the same language to all records in this set. I would like to apply:</xforms:label>
											<xforms:value value="true()"/>
										</xforms:item>
										<xforms:setvalue ref="instance('set')/language" ev:event="xforms-value-changed"/>
									</xforms:select1>
									<xforms:group ref=".[language = true()]">
										<div>
											<xforms:select1 ref="instance('set')/language">
												<xforms:item>
													<xforms:label>Select below...</xforms:label>
													<xforms:value/>
												</xforms:item>
												<xforms:itemset nodeset="instance('languages')//language">
													<xforms:label ref="name"/>
													<xforms:value ref="code"/>
												</xforms:itemset>
											</xforms:select1>
										</div>
									</xforms:group>
									<hr />
								</div>
								<div>
									<h4>Rights</h4>
									<xforms:select1 ref="rights" appearance="full">
										<xforms:item>
											<xforms:label>I do not want to apply the same rights statement to every record in this set</xforms:label>
											<xforms:value value="false()"/>
										</xforms:item>
										<xforms:item>
											<xforms:label>I want to apply the same rights statement to all records in this set. I would like to
												apply:</xforms:label>
											<xforms:value value="true()"/>
										</xforms:item>
										<xforms:action ev:event="xforms-value-changed">
											<xforms:setvalue ref="instance('set')/rights"/>
											<xforms:setvalue ref="instance('set')/rightsText"/>
										</xforms:action>

									</xforms:select1>
									<xforms:group ref=".[rights = true()]">
										<div>
											<xforms:select1 ref="instance('set')/rights">
												<xforms:label>Rights Statement</xforms:label>
												<xforms:hint>Required standardized rights statement</xforms:hint>
												<xforms:item>
													<xforms:label>Select below...</xforms:label>
													<xforms:value/>
												</xforms:item>
												<xforms:itemset nodeset="instance('rights-statements')//statement">
													<xforms:label ref="."/>
													<xforms:value ref="@value"/>
												</xforms:itemset>
											</xforms:select1>
										</div>
										<div>
											<xforms:textarea ref="instance('set')/rightsText">
												<xforms:label>Rights Statement</xforms:label>
												<xforms:hint>Free-text rights statement</xforms:hint>
											</xforms:textarea>
										</div>
									</xforms:group>
									<hr />
								</div>
								<div>
									<h4>Type</h4>
									<xforms:select1 ref="type" appearance="full">
										<xforms:item>
											<xforms:label>I do not want to apply the same type to every record in this set</xforms:label>
											<xforms:value value="false()"/>
										</xforms:item>
										<xforms:item>
											<xforms:label>I want to apply the same type to all records in this set. I would like to apply:</xforms:label>
											<xforms:value value="true()"/>
										</xforms:item>
										<xforms:setvalue ref="instance('set')/type" ev:event="xforms-value-changed"/>
									</xforms:select1>
									<xforms:group ref=".[type = true()]">
										<div>
											<xforms:select1 ref="instance('set')/type">
												<xforms:label>DCMI Type</xforms:label>
												<xforms:hint>Type of resource according to Dublin Core Metadata Initiative controlled vocabulary</xforms:hint>
												<xforms:item>
													<xforms:label>Select below...</xforms:label>
													<xforms:value/>
												</xforms:item>
												<xforms:itemset nodeset="instance('dcmi-types')//type">
													<xforms:label ref="."/>
													<xforms:value ref="@value"/>
												</xforms:itemset>
											</xforms:select1>
										</div>
									</xforms:group>
								</div>
							</xforms:group>

							<div class="text-right">
								<xi:include href="components/remediation-buttons.xml"/>
							</div>
						</xforms:case>
						<xforms:case id="agents-normalization">
							<xforms:group ref="instance('agent-list')">
								<xforms:var name="interface" select="instance('control-instance')/normalization/@current-interface"/>
								<div>
									<h2>Match creator &amp; contributor values to VIAF</h2>
									<h3>
										<xforms:output ref="instance('oai-set')//oai:set[oai:setSpec = instance('control-instance')/oai-set-code]/oai:setName"/>
									</h3>
									<div class="row">
										<div class="col-md-6">
											<p>You can choose to search VIAF to associate a creator or contributor label to a URI. If no clear match is found in
												VIAF, then the textual label from your set will be preserved in the DPLA or Primo output. To dismiss matches
												that were made previously, click the 'x' to the right of the URI.</p>
										</div>
										<div class="col-md-6 text-right">
											<xi:include href="components/enrichment-buttons.xml"/>
										</div>
									</div>

									<hr />
									<!-- display XBL components for VIAF lookups -->
									<xforms:group ref=".[count(agent) &gt; 0]">
										<xforms:repeat nodeset="xxforms:sort(agent, ., 'text', 'ascending')">
											<harvester:agent/>
										</xforms:repeat>
									</xforms:group>
									<xforms:group ref=".[count(agent) = 0]">
										<p>No creators or contributors to match to controlled vocabulary systems.</p>
									</xforms:group>

									<div class="text-right">
										<xi:include href="components/enrichment-buttons.xml"/>
									</div>
								</div>
							</xforms:group>
						</xforms:case>
						<xforms:case id="types-normalization">
							<xforms:group ref="instance('type-list')">
								<xforms:var name="interface" select="instance('control-instance')/normalization/@current-interface"/>
								<div>
									<h2>Match genre values to the Getty Art &amp; Architecture Thesaurus</h2>
									<h3>
										<xforms:output ref="instance('oai-set')//oai:set[oai:setSpec = instance('control-instance')/oai-set-code]/oai:setName"/>
									</h3>
									<div class="row">
										<div class="col-md-6">
											<p>You can choose to search the Getty AAT to associate a genre label to a URI. If no clear match is found in the
												AAT, then the textual label from your set will be preserved in the DPLA or Primo output. To dismiss matches that
												were made previously, click the 'x' to the right of the URI.</p>
										</div>
										<div class="col-md-6 text-right">
											<xi:include href="components/enrichment-buttons.xml"/>
										</div>
									</div>

									<hr />
									<!-- display XBL components for AAT lookups -->
									<xforms:group ref=".[count(type) &gt; 0]">
										<xforms:repeat nodeset="xxforms:sort(type, ., 'text', 'ascending')">
											<harvester:type/>
										</xforms:repeat>
									</xforms:group>
									<xforms:group ref=".[count(type) = 0]">
										<p>No dc:types (excluding those that match DCMI Types) available to link to the AAT.</p>
									</xforms:group>

									<div class="text-right">
										<xi:include href="components/enrichment-buttons.xml"/>
									</div>
								</div>
							</xforms:group>
						</xforms:case>
						<!--<xforms:case id="places-normalization">
							<xforms:group ref="instance('place-list')">
								<xforms:var name="interface" select="instance('control-instance')/normalization/@current-interface"/>
								<div>
									<h3>Match places to Geonames</h3>
									<!-\- display XBL components for Geonames lookups -\->
									<xforms:group ref=".[count(place) &gt; 0]">
										<xforms:repeat nodeset="xxforms:sort(place, ., 'text', 'ascending')">
											<harvester:place/>
										</xforms:repeat>
									</xforms:group>
									<xforms:group ref=".[count(place) = 0]">
										<p>No places to match to Geonames.org.</p>
									</xforms:group>
									
									
								</div>
							</xforms:group>
						</xforms:case>-->
						<xforms:case id="validation-results">
							<h2>Preview your records and contribute this set</h2>
							<h3>
								<xforms:output ref="instance('oai-set')//oai:set[oai:setSpec = instance('control-instance')/oai-set-code]/oai:setName"/>
							</h3>

							<xforms:group ref=".[instance('control-instance')/validation/error-count = 0]">
								<div class="row">
									<div class="col-md-6">
										<p>Before contributing this set, review the following sample records to confirm that the data are consistent with your
											expectations. Clicking the arrow to the left of the record's title will display the record's metadata.</p>
										<p>Click the CONTRIBUTE button to initiate the harvest for this set.</p>
									</div>
									<div class="col-md-6 text-right">
										<xforms:trigger>
											<xforms:label>CONTRIBUTE</xforms:label>
											<xforms:dispatch target="initiate-import" name="fr-show" ev:event="DOMActivate"/>
										</xforms:trigger>
									</div>
								</div>
							</xforms:group>

							<hr />
							<xforms:group ref="instance('validation')">
								<!-- display limited error response if there are errors, with a link to download full results as CSV -->
								<xforms:group ref=".[instance('control-instance')/validation/error-count &gt; 0]">
									<div class="row">
										<div class="col-md-12">
											<h3>Errors</h3>
											<div class="bg-danger alert-box">
												<span class="glyphicon glyphicon-exclamation-sign"></span>
												<strong>Alert:</strong>
												<strong><xforms:output ref="instance('control-instance')/validation/error-count"/></strong> records of
														<strong><xforms:output ref="instance('control-instance')/validation/total-count"/></strong> total have
												reported errors. Up to 20 are displayed below. Please download CSV for full report.</div>

											<!--<div>												
												<xforms:output ref="instance('csv-download')" appearance="xxforms:download">
													<xforms:label>Download CSV</xforms:label>
													<xforms:mediatype>text/csv</xforms:mediatype>
													<xforms:filename ref="concat(instance('control-instance')/oai-set-code, '.csv')"></xforms:filename>													
												</xforms:output>
											</div>-->

											<xforms:repeat nodeset="record[error][position() &lt;= 20]">
												<xforms:var name="id" select="@id"/>
												<xforms:var name="hash" select="digest($id, 'MD5', 'hex')"/>
												<h4>
													<small class="expand {$hash}-button">
														<xforms:trigger appearance="minimal">
															<xforms:label><span class="glyphicon glyphicon-triangle-bottom"></span></xforms:label>
															<xforms:action ev:event="DOMActivate">
																<xforms:var name="params" select="tokenize(substring-after(instance('set')/set, '?'), '&amp;')"/>
																<xforms:var name="metadataPrefix"
																	select="substring-after($params[contains(., 'metadataPrefix')][1], '=')"/>
																<xforms:setvalue ref="instance('control-instance')/id" value="$hash"/>
																<xforms:setvalue ref="instance('control-instance')/oai-service"
																	value="concat(substring-before(instance('set')/set, '?'), '?verb=GetRecord&amp;metadataPrefix=', $metadataPrefix, '&amp;identifier=', $id)"/>
																<xxforms:script>expand();</xxforms:script>
															</xforms:action>
														</xforms:trigger>
													</small>
													<xforms:output ref="title"/>
												</h4>
												<div>
													<xforms:output ref="@id">
														<xforms:label>Identifier</xforms:label>
													</xforms:output>
													<xforms:trigger appearance="minimal">
														<xforms:label><span class="glyphicon glyphicon-new-window"></span></xforms:label>
														<xforms:action ev:event="DOMActivate">
															<xforms:var name="params" select="tokenize(substring-after(instance('set')/set, '?'), '&amp;')"/>
															<xforms:var name="metadataPrefix"
																select="substring-after($params[contains(., 'metadataPrefix')][1], '=')"/>
															<xforms:load
																resource="{concat(substring-before(instance('set')/set, '?'), '?verb=GetRecord&amp;metadataPrefix=', $metadataPrefix, '&amp;identifier=', $id)}"
																show="new"/>
														</xforms:action>
													</xforms:trigger>
												</div>
												<div>
													<xforms:output ref="uri">
														<xforms:label>URI</xforms:label>
													</xforms:output>
													<xforms:trigger appearance="minimal">
														<xforms:label><span class="glyphicon glyphicon-new-window"></span></xforms:label>
														<xforms:load ev:event="DOMActivate" resource="{uri}" show="new"/>
													</xforms:trigger>
												</div>
												<xforms:repeat nodeset="error">
													<div>
														<xforms:output ref=".">
															<xforms:label>Error</xforms:label>
														</xforms:output>
													</div>
												</xforms:repeat>
												<xforms:repeat nodeset="dcmitype">
													<div>
														<xforms:output ref=".">
															<xforms:label>DCMI Type</xforms:label>
														</xforms:output>
													</div>
												</xforms:repeat>
												<xforms:group ref="date">
													<div>
														<xforms:output ref=".">
															<xforms:label>Date(s)</xforms:label>
														</xforms:output>
													</div>
												</xforms:group>
												<xforms:group ref="rights">
													<div>
														<xforms:output ref=".">
															<xforms:label>Rights</xforms:label>
														</xforms:output>
													</div>
												</xforms:group>
												<div class="{$hash}_container ajax_container hidden"></div>
												<hr />
											</xforms:repeat>
										</div>
									</div>
								</xforms:group>
								<!-- display validation results in pages of 50 -->
								<xforms:group ref=".[instance('control-instance')/validation/error-count = 0]">
									<xforms:var name="min" select="number(instance('control-instance')/validation/min-pos)"/>
									<xforms:var name="max" select="number(instance('control-instance')/validation/max-pos)"/>
									<xforms:var name="numFound" select="number(instance('control-instance')/validation/total-count)"/>
									<!-- pagination -->
									<div class="row">
										<div class="col-md-6"> Displaying records <strong><xforms:output value="$min"/></strong> to <strong><xforms:output
													value="if ($numFound &gt; $max) then $max else $numFound"/></strong> of <strong><xforms:output
													value="$numFound"/></strong> total records.</div>
										<div class="col-md-6 text-right">
											<!-- back buttons -->
											<xforms:group ref=".[$min = 1]">
												<a class="btn btn-default disabled" title="Previous" href="#">
													<span class="glyphicon glyphicon-backward"></span>
												</a>
											</xforms:group>
											<xforms:group ref=".[$min &gt; 1]">
												<xforms:trigger>
													<xforms:label>
														<span class="glyphicon glyphicon-backward"></span>
													</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:setvalue ref="instance('control-instance')/validation/min-pos" value="$min - 50"/>
														<xforms:setvalue ref="instance('control-instance')/validation/max-pos" value="$max - 50"/>
														<xxforms:script>clear();</xxforms:script>
													</xforms:action>
												</xforms:trigger>
											</xforms:group>
											<xforms:group ref=".[$max &lt; $numFound]">
												<xforms:trigger>
													<xforms:label>
														<span class="glyphicon glyphicon-forward"></span>
													</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:setvalue ref="instance('control-instance')/validation/min-pos" value="$min + 50"/>
														<xforms:setvalue ref="instance('control-instance')/validation/max-pos"
															value="if ($max + 50 &gt; $numFound) then $numFound else $max + 50"/>
														<xxforms:script>clear();</xxforms:script>
													</xforms:action>
												</xforms:trigger>
											</xforms:group>
											<!-- forward buttons -->
											<xforms:group ref=".[$max &gt;= $numFound]">
												<a class="btn btn-default disabled" title="Previous" href="#">
													<span class="glyphicon glyphicon-forward"></span>
												</a>
											</xforms:group>
										</div>
									</div>
									<div class="row">
										<div class="col-md-12">
											<!-- display only 50 records at a time -->
											<xforms:repeat nodeset="record[position() &gt;= $min and position() &lt;= $max]">
												<xforms:var name="id" select="@id"/>
												<xforms:var name="hash" select="digest($id, 'MD5', 'hex')"/>
												<h4>
													<small class="expand {$hash}-button">
														<xforms:trigger appearance="minimal">
															<xforms:label><span class="glyphicon glyphicon-triangle-bottom"></span></xforms:label>
															<xforms:action ev:event="DOMActivate">
																<xforms:var name="params" select="tokenize(substring-after(instance('set')/set, '?'), '&amp;')"/>
																<xforms:var name="metadataPrefix"
																	select="substring-after($params[contains(., 'metadataPrefix')][1], '=')"/>
																<xforms:setvalue ref="instance('control-instance')/id" value="$hash"/>
																<xforms:setvalue ref="instance('control-instance')/oai-service"
																	value="concat(substring-before(instance('set')/set, '?'), '?verb=GetRecord&amp;metadataPrefix=', $metadataPrefix, '&amp;identifier=', $id)"/>
																<xxforms:script>expand();</xxforms:script>
															</xforms:action>
														</xforms:trigger>
													</small>
													<xforms:output ref="title"/>
												</h4>
												<div>
													<xforms:output ref="@id">
														<xforms:label>Identifier</xforms:label>
													</xforms:output>
													<xforms:trigger appearance="minimal">
														<xforms:label><span class="glyphicon glyphicon-new-window"></span></xforms:label>
														<xforms:action ev:event="DOMActivate">
															<xforms:var name="params" select="tokenize(substring-after(instance('set')/set, '?'), '&amp;')"/>
															<xforms:var name="metadataPrefix"
																select="substring-after($params[contains(., 'metadataPrefix')][1], '=')"/>
															<xforms:load
																resource="{concat(substring-before(instance('set')/set, '?'), '?verb=GetRecord&amp;metadataPrefix=', $metadataPrefix, '&amp;identifier=', $id)}"
																show="new"/>
														</xforms:action>
													</xforms:trigger>
												</div>
												<div>
													<xforms:output ref="uri">
														<xforms:label>URI</xforms:label>
													</xforms:output>
													<xforms:trigger appearance="minimal">
														<xforms:label><span class="glyphicon glyphicon-new-window"></span></xforms:label>
														<xforms:load ev:event="DOMActivate" resource="{uri}" show="new"/>
													</xforms:trigger>
												</div>
												<xforms:repeat nodeset="dcmitype">
													<div>
														<xforms:output ref=".">
															<xforms:label>DCMI Type</xforms:label>
														</xforms:output>
													</div>
												</xforms:repeat>
												<xforms:group ref="date">
													<div>
														<xforms:output ref=".">
															<xforms:label>Date(s)</xforms:label>
														</xforms:output>
													</div>
												</xforms:group>
												<xforms:group ref="rights">
													<div>
														<xforms:output ref=".">
															<xforms:label>Rights</xforms:label>
														</xforms:output>
													</div>
												</xforms:group>
												
												<div class="{$hash}_container ajax_container hidden"></div>
												<hr />
											</xforms:repeat>
											<div class="text-right">
												<xforms:trigger>
													<xforms:label>CONTRIBUTE</xforms:label>
													<xforms:dispatch target="initiate-import" name="fr-show" ev:event="DOMActivate"/>
												</xforms:trigger>
											</div>
										</div>
									</div>
								</xforms:group>
							</xforms:group>
						</xforms:case>
						<xforms:case id="import-complete">
							<h2>Thank you for contributing this set</h2>
							<h3>
								<xforms:output ref="instance('oai-set')//oai:set[oai:setSpec = instance('control-instance')/oai-set-code]/oai:setName"/>
							</h3>
							<div class="col-md-3 pull-right">
								<xforms:trigger>
									<xforms:label>VIEW MY SETS</xforms:label>
									<xforms:load ev:event="DOMActivate" resource="../admin/" show="replace"/>
								</xforms:trigger>
							</div>
							<hr />
							<p>If you chose to send your set to DPLA, you can expect it to appear in DPLA after the next harvest.</p>
							<p>If you chose to send your set to Alliance Primo, you can expect it to appear in Primo tomorrow; publication is in sync with the
								nightly update from Alma.</p>
							
							<div>
								<xforms:trigger appearance="minimal">
									<xforms:label>Import another set <span class="glyphicon glyphicon-repeat"/></xforms:label>
									<xforms:load resource="../admin/import" show="replace" ev:event="DOMActivate"/>
								</xforms:trigger>
							</div>
						</xforms:case>
					</xforms:switch>

					<!-- hidden values to be used by javascript -->
					<div class="hidden">
						<xforms:output ref="instance('control-instance')/id" id="id"/>
						<xforms:output ref="instance('control-instance')/oai-service" id="oai-service"/>
						<xforms:output ref="instance('set')/genre" id="genre"/>
						<xforms:output ref="instance('set')/format" id="format"/>
						<xforms:output ref="instance('set')/language" id="language"/>
						<xforms:output ref="instance('set')/repository" id="repository"/>
						<xforms:output ref="instance('set')/rights" id="rights"/>
						<xforms:output ref="instance('set')/rightsText" id="rightsText"/>
						<xforms:output ref="instance('set')/target" id="target"/>
						<xforms:output ref="instance('set')/type" id="type"/>
					</div>

<!--					<fr:xforms-inspector/>-->
				</div>
			</div>
		</div>
		<!-- dialog asking to initiate the import -->
		<fr:alert-dialog id="initiate-import">
			<fr:label>Import Data</fr:label>
			<fr:message>Proceed with importation of the OAI-PMH set? This may take some time, depending on the number of records to be harvested.</fr:message>
			<fr:negative-choice>
				<fr:label>No</fr:label>
			</fr:negative-choice>
			<fr:positive-choice>
				<fr:label>Yes</fr:label>
				<xforms:action ev:event="DOMActivate">
					<!-- set SPARQL service -->
					<xforms:setvalue ref="instance('control-instance')/sparql-service" value="instance('config')/sparql/update"/>
					<!-- delete the set from the SPARQL endpoint -->
					<xforms:setvalue ref="instance('sparqlUpdate')"
						value="replace(instance('sparqlUpdate-templates')/query[@id='delete-set'], 'SET', normalize-space(instance('set')/set))"/>
					<xforms:send submission="update-graph"/>
					<!-- call the getRDF web service to transform OAI-PMH into RDF. It will make use to any terms normalized and inserted into Google Sheets -->
					<xforms:action ev:event="xforms-submit-done">
						<xforms:send submission="get-rdf"/>
						<!-- generate RDF for concepts -->
						<xforms:delete nodeset="instance('rdf')/*"/>
						<xforms:action xxforms:iterate="instance('type-list')/type[@new = true() and string(@uri)]">
							<xforms:insert context="instance('rdf')" nodeset="./child::node()[last()]" origin="instance('concept-template')"/>
							<xforms:setvalue ref="instance('rdf')/*[last()]/@rdf:about" value="context()/@uri"/>
							<xforms:setvalue ref="instance('rdf')/*[last()]/skos:prefLabel" value="context()/@prefLabel"/>
						</xforms:action>
						<xforms:action xxforms:iterate="instance('agent-list')/type[@new = true() and string(@uri)]">
							<xforms:insert context="instance('rdf')" nodeset="./child::node()[last()]" origin="instance('agent-template')"/>
							<xforms:setvalue ref="instance('rdf')/*[last()]/@rdf:about" value="context()/@uri"/>
							<xforms:setvalue ref="instance('rdf')/*[last()]/skos:prefLabel" value="context()/@prefLabel"/>
						</xforms:action> 
						<xforms:send submission="post-rdf"/>
						<xforms:toggle case="import-complete"/>
						<!-- set bread crumb navigation -->
						<xforms:action xxforms:iterate="instance('control-instance')/interfaces/*">
							<xforms:setvalue ref="@current" value="false()"/>
							<xforms:setvalue ref="@return" value="false()"/>
						</xforms:action>
						<xforms:setvalue ref="instance('control-instance')/interfaces/contribute/@current" value="true()"/>
					</xforms:action>
				</xforms:action>
			</fr:positive-choice>
		</fr:alert-dialog>
		
		<!-- dialog to start over -->
		<fr:alert-dialog id="start-over-dialog">
			<fr:label>Start Over</fr:label>
			<fr:message>Are you sure you want to start over? Your selections made in this set will be lost.</fr:message>
			<fr:negative-choice>
				<fr:label>No</fr:label>
			</fr:negative-choice>
			<fr:positive-choice>
				<fr:label>Yes</fr:label>
				<xforms:action ev:event="DOMActivate">
					<xforms:load resource="../admin/import" show="replace"/>
				</xforms:action>
			</fr:positive-choice>
		</fr:alert-dialog>
		
		<xxforms:dialog id="destination-info-dialog" appearance="full" level="modal" close="true" draggable="true" visible="false">
			<xforms:label>Destination Information</xforms:label>
			<div>
				<p><strong>Primo</strong>: Digital objects that are described with Dublin Core in an unrestricted system and that you would like to pipe into
					Alliance Primo.</p>
				<p><strong>DPLA</strong>: Digital objects that are described with Dublin Core in an unrestricted system and that are part of the United States’
					cultural and/or scientific heritage.</p>
				<p><strong>DPLA and Primo</strong>: Digital objects that meet criteria for both Primo and DPLA.</p>
			</div>
		</xxforms:dialog>
	</body>
</html>
