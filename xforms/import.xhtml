<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ev="http://www.w3.org/2001/xml-events"
	xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:oai="http://www.openarchives.org/OAI/2.0/" xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
	xmlns:res="http://www.w3.org/2005/sparql-results#">
	<head>
		<title>OAI-PMH Harvester: Batch Import</title>
		<link rel="stylesheet" href="/fr/style/bootstrap/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="/fr/style/form-runner-bootstrap-override.css" type="text/css" />
		<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />
		<script type="text/javascript" src="//netdna.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="shortcut icon" href="/ops/images/orbeon-icon-16.ico" />
		<link rel="icon" href="/ops/images/orbeon-icon-16.png" type="image/png" />
		<link rel="stylesheet" href="/apps/harvester/xforms/css/style.css" />

		<xforms:model>
			<xforms:instance id="control-instance" xxforms:exclude-result-prefixes="#all">
				<controls xmlns="">
					<status></status>
					<current></current>
					<total></total>
					<count></count>
					<upload-trigger>false</upload-trigger>
				</controls>
			</xforms:instance>
			
			<xforms:instance id="set" xxforms:exclude-result-prefixes="#all">
				<set xmlns="">
					<set></set>
					<repository></repository>
					<rights></rights>
					<target>both</target>
				</set>
			</xforms:instance>

			<xforms:instance id="config" xxforms:exclude-result-prefixes="#all">
				<xi:include href="../config.xml"></xi:include>
			</xforms:instance>
			
			<!-- instances for controlled lists -->
			<xforms:instance id="rights-statements">
				<rights xmlns="">
					<statement value="InC">In Copyright</statement>
					<statement value="InC-OW-EU">In Copyright - EU orphan work</statement>
					<statement value="InC-EDU">In Copyright - Educational use permitted</statement>
					<statement value="InC-NC">In Copyright - Non-commercial use permitted</statement>
					<statement value="InC-RUU">In Copyright - Rights-holder(s) unlocatable or unidentifiable</statement>
					<statement value="NoC-CR">No Copyright - Contractual restrictions</statement>
					<statement value="NoC-NC">No Copyright - Non-commercial use only</statement>
					<statement value="NoC-OKLR">No Copyright - Other known legal restrictions</statement>
					<statement value="NoC-US">No Copyright - United States</statement>
					<statement value="CNE">Copyright not evaluated</statement>
					<statement value="UND">Copyright undetermined</statement>
					<statement value="NKC">No known copyright</statement>
				</rights>
			</xforms:instance>
			
			<!-- instances for REST interactions -->
			<xforms:instance id="feed" xxforms:exclude-result-prefixes="#all">
				<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"></OAI-PMH>
			</xforms:instance>

			<xforms:instance id="rdf" xxforms:exclude-result-prefixes="#all">
				<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
					xmlns:ore="http://www.openarchives.org/ore/terms/" xmlns:xsd="http://www.w3.org/2001/XMLSchema#" xmlns:edm="http://www.europeana.eu/schemas/edm/" xmlns:dpla="http://dp.la/terms/"
					xmlns:foaf="http://xmlns.com/foaf/0.1/"></rdf:RDF>
			</xforms:instance>

			<!-- count response -->
			<xforms:instance id="count-response">
				<response xmlns=""></response>
			</xforms:instance>

			<!-- sparql update -->
			<xforms:instance id="delete-set">
				<query><![CDATA[ PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX edm:	<http://www.europeana.eu/schemas/edm/>
PREFIX prov:	<http://www.w3.org/ns/prov#>
PREFIX dcmitype:	<http://purl.org/dc/dcmitype/>
DELETE {?s ?p ?o} WHERE { 
{?agg prov:wasDerivedFrom <SET> ;
    edm:preview ?s . ?s ?p ?o}
UNION {?agg prov:wasDerivedFrom <SET> ;
    edm:object ?s . ?s ?p ?o}
UNION {?s dcterms:isPartOf <SET> . ?s ?p ?o }
UNION {?s prov:wasDerivedFrom <SET> . ?s ?p ?o }
UNION {<SET> a dcmitype:Collection . ?s ?p ?o . FILTER (?s = <SET>)}
}]]></query>
			</xforms:instance>

			<xforms:instance id="sparqlQuery">
				<query></query>
			</xforms:instance>

			<xforms:instance id="sparqlResponse">
				<query></query>
			</xforms:instance>

			<!-- ************************* BINDINGS ************************** -->
			<xforms:bind nodeset="instance('set')">
				<xforms:bind nodeset="set" required="true()" type="xs:anyURI" constraint="matches(., 'https?://')"/>
				<xforms:bind nodeset="repository" required="true()"/>
			</xforms:bind>
			
			<xforms:bind nodeset="instance('control-instance')">
				<xforms:bind id="upload-trigger" nodeset="upload-trigger" type="xs:boolean" readonly=". != true()"></xforms:bind>
			</xforms:bind>

			<!-- ************************* SUBMISSIONS ************************** -->
			<!-- get OAI-PMH feed, perform validation, and return the count (iterating through resumptionTokens if necessary -->
			<xforms:submission id="get-feed" serialization="none" method="get" action="{instance('set')/set}" replace="instance" instance="feed">
				<xforms:header>
					<xforms:name>User-Agent</xforms:name>
					<xforms:value>XForms/harvester.orbiscascade.org</xforms:value>
				</xforms:header>

				<!-- if the OAI-PMH feed errors, that means it is invalid XML -->
				<xforms:action ev:event="xforms-submit-error">
					<xforms:insert context="instance('sets')/set[position()=instance('control-instance')/current]" origin="xforms:element('oai-valid', false())"></xforms:insert>
					<xforms:insert context="instance('sets')/set[position()=instance('control-instance')/current]" origin="xforms:element('error-code', '1')"></xforms:insert>
				</xforms:action>
				<!-- if the XForms submission is successful (well-formed XML document), then verify the namespace of the root element -->
				<xforms:action ev:event="xforms-submit-done">
					<xforms:action if="not(instance('feed')/namespace-uri()='http://www.openarchives.org/OAI/2.0/')">
						<xforms:insert context="instance('sets')/set[position()=instance('control-instance')/current]" origin="xforms:element('oai-valid', false())"></xforms:insert>
						<xforms:insert context="instance('sets')/set[position()=instance('control-instance')/current]" origin="xforms:element('error-code', '2')"></xforms:insert>
					</xforms:action>
					<xforms:action if="instance('feed')/namespace-uri()='http://www.openarchives.org/OAI/2.0/'">
						<xforms:insert context="instance('sets')/set[position()=instance('control-instance')/current]" origin="xforms:element('count', '0')"
							if="not(instance('sets')/set[position()=instance('control-instance')/current]/count)"></xforms:insert>
						<xforms:setvalue ref="instance('control-instance')/count"
							value="instance('control-instance')/count + count(instance('feed')/descendant::oai_dc:dc[dc:relation[contains(., 'ark:/')]])"></xforms:setvalue>
						<xforms:setvalue ref="instance('sets')/set[position()=instance('control-instance')/current]/count" value="instance('control-instance')/count"></xforms:setvalue>
						<!-- for a multipage feed, check for the existence of a resumptionToken for iteration -->
						<xforms:action if="instance('feed')//oai:resumptionToken">							
							<xforms:setvalue ref="instance('control-instance')/set" value="concat(instance('feed')//descendant::oai:request, '?verb=ListRecords&amp;resumptionToken=', instance('feed')//descendant::oai:resumptionToken)"/>
							<xforms:send submission="get-feed"/>
						</xforms:action>
					</xforms:action>
				</xforms:action>
			</xforms:submission>

			<!-- get the RDF through the administrative getRDF API -->
			<xforms:submission id="get-rdf" serialization="none" method="get"
				action="/harvester/admin/getRDF?sets={encode-for-uri(instance('set')/set)}&amp;repository={instance('set')/repository}&amp;rights={instance('set')/rights}&amp;target={instance('set')/target}" replace="instance" instance="rdf">
				<!-- upon successful execution of getRDF, post the RDF into the triplestore -->
				<xforms:send submission="post-rdf" ev:event="xforms-submit-done"></xforms:send>
				<!-- otherwise display a popup alert -->
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to get RDF</xforms:message>
			</xforms:submission>

			<!-- post RDF into the triplestore -->
			<xforms:submission id="post-rdf" action="{instance('config')/sparql/store}?default" ref="instance('rdf')" replace="none" method="post" mediatype="application/rdf+xml">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status" value="concat(instance('set')/set, ': Successfully posted to endpoint.')"></xforms:setvalue>
				<xforms:message ev:event="xforms-submit-error" level="modal" value="concat(instance('set')/set, ': Failed to post to endpoint.')"></xforms:message>
			</xforms:submission>

			<!-- SPARQL queries -->
			<xforms:submission id="submit-sparqlQuery" action="{instance('config')/sparql/query}?query={encode-for-uri(instance('sparqlQuery'))}&amp;output=xml" ref="instance('sparqlResponse')"
				replace="instance" method="get">
				<xforms:message ev:event="xforms-submit-error" level="modal">SPARQL query failed.</xforms:message>
			</xforms:submission>

			<xforms:submission id="delete-graph" action="{instance('config')/sparql/update}" ref="instance('sparqlQuery')" serialization="text/plain" replace="none" method="post"
				mediatype="application/sparql-update">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">SPARQL update failed.</xforms:message>
				</xforms:action>
			</xforms:submission>

			<!-- **************** DYNAMIC VALIDATION CONTROLS ********************** -->
			<xforms:action ev:event="xxforms-invalid" ev:observer="set">
				<xforms:setvalue ref="instance('control-instance')/upload-trigger" value="false()"></xforms:setvalue>
			</xforms:action>
			
			<xforms:action ev:event="xxforms-valid" ev:observer="set">
				<xforms:setvalue ref="instance('control-instance')/upload-trigger" value="true()"></xforms:setvalue>
			</xforms:action>

			<!-- ************************* XFORMS-MODEL-CONSTRUCT-DONE ************************** -->
			<!-- get the list of repositories from the SPARQL endpoint on xforms-model-construct-done -->
			<!--<xforms:action ev:event="xforms-model-construct-done">
				
			</xforms:action>-->
		</xforms:model>
	</head>


	<body>
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-12">
					<xforms:group ref=".[string-length(instance('control-instance')/status) &gt; 0]">
						<div class="bg-info alert">
							<p>
								<span class="glyphicon glyphicon-info-sign"></span>
								<strong>Status:</strong>
								<xforms:output ref="instance('control-instance')/status"></xforms:output>
							</p>
						</div>
					</xforms:group>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<h1>OAI-PMH Harvester: Import</h1>
					<a href="../admin/"><span class="glyphicon glyphicon-arrow-left"></span>Return to Admin</a>
					
					<xforms:switch>
						<xforms:case id="import-form">
							<xforms:group ref="instance('set')">
								<p>Input the following information to harvest the OAI-PMH into the system:</p>
								<div>
									<xforms:input ref="set">
										<xforms:label>Set</xforms:label>
										<xforms:alert>Required</xforms:alert>
									</xforms:input>								
								</div>
								<div>
									<xforms:select1 ref="repository">
										<xforms:label>Repository</xforms:label>
										<xforms:alert>Required</xforms:alert>
										<xforms:item>
											<xforms:label>Select...</xforms:label>
											<xforms:value></xforms:value>
										</xforms:item>
										<xforms:itemset nodeset="xxforms:sort(distinct-values(instance('config')//repository), ., 'text', 'ascending')">
											<xforms:label ref="."></xforms:label>
											<xforms:value ref="."></xforms:value>
										</xforms:itemset>
									</xforms:select1>
								</div>
								<div>
									<xforms:select1 ref="rights">
										<xforms:label>Rights Statement</xforms:label>
										<xforms:hint>Optional standardized rights statement</xforms:hint>
										<xforms:item>
											<xforms:label>Select...</xforms:label>
											<xforms:value/>
										</xforms:item>
										<xforms:itemset nodeset="instance('rights-statements')//statement">
											<xforms:label ref="."/>
											<xforms:value ref="@value"/>
										</xforms:itemset>
									</xforms:select1>
								</div>
								<div>
									<xforms:select1 ref="target">
										<xforms:label>Target System</xforms:label>
										<xforms:item>
											<xforms:label>DPLA and Primo</xforms:label>
											<xforms:value>both</xforms:value>
										</xforms:item>
										<xforms:item>
											<xforms:label>DPLA only</xforms:label>
											<xforms:value>dpla</xforms:value>
										</xforms:item>
										<xforms:item>
											<xforms:label>Primo only</xforms:label>
											<xforms:value>primo</xforms:value>
										</xforms:item>
									</xforms:select1>
								</div>
								<xforms:trigger bind="upload-trigger">
									<xforms:label><span class="glyphicon glyphicon-import"></span>Import</xforms:label>
									<xforms:action ev:event="DOMActivate">
										<!-- delete the set from the SPARQL update -->
										<xforms:setvalue ref="instance('sparqlQuery')" value="replace(instance('delete-set'), 'SET', instance('set')/set)"/>
										<xforms:send submission="delete-graph"/>
										<!-- call the getRDF web service to transform OAI-PMH into RDF -->
										<xforms:action ev:event="xforms-submit-done">
											<xforms:send submission="get-rdf"/>
										</xforms:action>							
									</xforms:action>
								</xforms:trigger>
							</xforms:group>
						</xforms:case>
						<xforms:case id="import-complete">
							<p>The ingestion process has been completed.</p>
						</xforms:case>
					</xforms:switch>
					
					<!-- ***
						initiate-validation-dialog: this is the dialog to initiate the validation process.
						Options: Negative choice: close dialog, cancel validation
							Positive choice: iterate through each set to perform validation and return a total count of CHOs. See the get-feed XForms Submission above 
							for further workflow documentation.
						*** -->
					<fr:alert-dialog id="initiate-validation-dialog">
						<fr:label>Validate Sets</fr:label>
						<fr:message>Proceed with set validation? This may take some time, depending the number of sets and whether pagination is necessary for harvesting.</fr:message>
						<fr:negative-choice>
							<fr:label>No</fr:label>
						</fr:negative-choice>
						<fr:positive-choice>
							<fr:label>Yes</fr:label>
							<xforms:action ev:event="DOMActivate">
								<!-- hide initiate-validation-dialog and show the progess-dialog -->
								<!--<xxforms:show dialog="progress-dialog"></xxforms:show>
								<xforms:dispatch target="initiate-validation-dialog" name="fr-hide"></xforms:dispatch>		-->
								<xforms:setvalue ref="instance('control-instance')/total" value="count(instance('sets')/set)"></xforms:setvalue>
								<xforms:action xxforms:iterate="instance('sets')/set">
									<xforms:var name="position" value="position()"></xforms:var>
									<xforms:var name="repository" value="context()/repository"></xforms:var>
									<xforms:setvalue ref="instance('control-instance')/count">0</xforms:setvalue>
									<xforms:setvalue ref="instance('control-instance')/current" value="$position"></xforms:setvalue>
									<xforms:setvalue ref="instance('set')/set" value="context()/url"></xforms:setvalue>
									<!-- Step 1: verify that the repository in the set XML matches a repository returned from the Harvester SPARQL endpoint -->
									<xforms:action if="not(instance('repository-list')/repository = $repository)">
										<xforms:insert context="instance('sets')/set[position()=$position]" origin="xforms:element('repository-valid', false())"></xforms:insert>
										<xforms:insert context="instance('sets')/set[position()=$position]" origin="xforms:element('error-code', '0')"></xforms:insert>
									</xforms:action>
									<!-- Step 2: Get the OAI-PMH feed: Further XForms actions are implemented in the XForms Submission -->
									<xforms:action if="instance('repository-list')/repository = $repository">
										<xforms:send submission="get-feed"></xforms:send>
									</xforms:action>
								</xforms:action>								
								<!--<xxforms:hide dialog="progress-dialog"></xxforms:hide>-->
							</xforms:action>
						</fr:positive-choice>
					</fr:alert-dialog>
					
					<!--<fr:xforms-inspector></fr:xforms-inspector>-->
				</div>
			</div>
		</div>
	</body>
</html>