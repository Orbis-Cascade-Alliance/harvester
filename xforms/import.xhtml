<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ev="http://www.w3.org/2001/xml-events"
	xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:oai="http://www.openarchives.org/OAI/2.0/" xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
	xmlns:res="http://www.w3.org/2005/sparql-results#">
	<head>
		<title>OAI-PMH Harvester: Batch Import</title>
		<link rel="stylesheet" href="/fr/style/bootstrap/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="/fr/style/form-runner-bootstrap-override.css" type="text/css" />
		<link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
		<script type="text/javascript" src="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
		<link rel="shortcut icon" href="/ops/images/orbeon-icon-16.ico" />
		<link rel="icon" href="/ops/images/orbeon-icon-16.png" type="image/png" />
		<link rel="stylesheet" href="/apps/harvester/xforms/css/style.css" />

		<xforms:model>
			<xforms:instance id="sets" xxforms:exclude-result-prefixes="#all">
				<sets xmlns="">
					<set>
						<url></url>
						<repository></repository>
						<oai-valid>false</oai-valid>
						<repository-valid>false</repository-valid>
						<error-code></error-code>
						<count></count>
					</set>
				</sets>
			</xforms:instance>

			<xforms:instance id="control-instance">
				<controls xmlns="">
					<status></status>
					<set></set>
					<repository></repository>
					<upload-valid></upload-valid>
					<validation-complete>false</validation-complete>
					<current></current>
					<total></total>
					<count></count>
				</controls>
			</xforms:instance>

			<xforms:instance id="repository-list" xxforms:exclude-result-prefixes="#all">
				<repositories xmlns=""></repositories>
			</xforms:instance>

			<xforms:instance id="config" xxforms:exclude-result-prefixes="#all">
				<xi:include href="../config.xml"></xi:include>
			</xforms:instance>

			<xforms:instance id="feed" xxforms:exclude-result-prefixes="#all">
				<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"></OAI-PMH>
			</xforms:instance>

			<xforms:instance id="rdf" xxforms:exclude-result-prefixes="#all">
				<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
					xmlns:ore="http://www.openarchives.org/ore/terms/" xmlns:xsd="http://www.w3.org/2001/XMLSchema#" xmlns:edm="http://www.europeana.eu/schemas/edm/" xmlns:dpla="http://dp.la/terms/"
					xmlns:foaf="http://xmlns.com/foaf/0.1/"></rdf:RDF>
			</xforms:instance>

			<!-- count response -->
			<xforms:instance id="count-response">
				<response xmlns=""></response>
			</xforms:instance>

			<!-- upload instances -->
			<xforms:instance id="file">
				<!-- Start with placeholders for three files -->
				<file xmlns="" xsi:type="xs:anyURI" filename="" mediatype="" size="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></file>
			</xforms:instance>

			<xforms:instance id="load-sets-config">
				<config xmlns="">
					<url></url>
					<content-type>application/xml</content-type>
					<mode>xml</mode>
				</config>
			</xforms:instance>

			<!-- sparql update -->
			<xforms:instance id="purge-set-template">
				<query><![CDATA[ PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX edm:	<http://www.europeana.eu/schemas/edm/>
DELETE {?s ?p ?o} WHERE { 
{?cho dcterms:relation <SET> .
?ore edm:aggregatedCHO ?cho .
?ore edm:object ?s .
?s ?p ?o}
UNION {?cho dcterms:relation <SET> .
?ore edm:aggregatedCHO ?cho .
?ore edm:preview ?s .
?s ?p ?o}
UNION {?cho dcterms:relation <SET> .
?s edm:aggregatedCHO ?cho . ?s ?p ?o }
UNION {?s dcterms:relation <SET> .
?s ?p ?o }
}]]>
				</query>
			</xforms:instance>

			<xforms:instance id="list-repositories">
				<query>
					<![CDATA[PREFIX rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX arch:	<http://purl.org/archival/vocab/arch#>
PREFIX edm:	<http://www.europeana.eu/schemas/edm/>

SELECT ?uri ?name WHERE {
  ?uri a arch:Archive ;
         foaf:name ?name
} ORDER BY ?name]]>
				</query>
			</xforms:instance>

			<xforms:instance id="sparqlQuery">
				<query></query>
			</xforms:instance>

			<xforms:instance id="sparqlResponse">
				<query></query>
			</xforms:instance>

			<!-- ************************* BINDINGS ************************** -->
			<xforms:bind nodeset="instance('sets')">
				<xforms:bind nodeset="set">
					<xforms:bind nodeset="oai-valid" type="xs:boolean"></xforms:bind>
					<xforms:bind nodeset="repository-valid" type="xs:boolean"></xforms:bind>
					<xforms:bind nodeset="error-code" type="xs:integer"></xforms:bind>
					<xforms:bind nodeset="count" type="xs:integer"></xforms:bind>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('control-instance')">
				<xforms:bind nodeset="validation-complete" type="xs:boolean"></xforms:bind>
			</xforms:bind>

			<!-- ************************* SUBMISSIONS ************************** -->
			<!-- get OAI-PMH feed, perform validation, and return the count (iterating through resumptionTokens if necessary -->
			<xforms:submission id="get-feed" serialization="none" method="get" action="{instance('control-instance')/set}" replace="instance" instance="feed">
				<xforms:header>
					<xforms:name>User-Agent</xforms:name>
					<xforms:value>XForms/harvester.orbiscascade.org</xforms:value>
				</xforms:header>

				<!-- if the OAI-PMH feed errors, that means it is invalid XML -->
				<xforms:action ev:event="xforms-submit-error">
					<xforms:insert context="instance('sets')/set[position()=instance('control-instance')/current]" origin="xforms:element('oai-valid', false())"></xforms:insert>
					<xforms:insert context="instance('sets')/set[position()=instance('control-instance')/current]" origin="xforms:element('error-code', '1')"></xforms:insert>
				</xforms:action>
				<!-- if the XForms submission is successful (well-formed XML document), then verify the namespace of the root element -->
				<xforms:action ev:event="xforms-submit-done">
					<xforms:action if="not(instance('feed')/namespace-uri()='http://www.openarchives.org/OAI/2.0/')">
						<xforms:insert context="instance('sets')/set[position()=instance('control-instance')/current]" origin="xforms:element('oai-valid', false())"></xforms:insert>
						<xforms:insert context="instance('sets')/set[position()=instance('control-instance')/current]" origin="xforms:element('error-code', '2')"></xforms:insert>
					</xforms:action>
					<xforms:action if="instance('feed')/namespace-uri()='http://www.openarchives.org/OAI/2.0/'">
						<xforms:insert context="instance('sets')/set[position()=instance('control-instance')/current]" origin="xforms:element('count', '0')"
							if="not(instance('sets')/set[position()=instance('control-instance')/current]/count)"></xforms:insert>
						<xforms:setvalue ref="instance('control-instance')/count"
							value="instance('control-instance')/count + count(instance('feed')/descendant::oai_dc:dc[dc:relation[contains(., 'ark:/')]])"></xforms:setvalue>
						<xforms:setvalue ref="instance('sets')/set[position()=instance('control-instance')/current]/count" value="instance('control-instance')/count"></xforms:setvalue>
						<!-- for a multipage feed, check for the existence of a resumptionToken for iteration -->
						<xforms:action if="instance('feed')//oai:resumptionToken">							
							<xforms:setvalue ref="instance('control-instance')/set" value="concat(instance('feed')//descendant::oai:request, '?verb=ListRecords&amp;resumptionToken=', instance('feed')//descendant::oai:resumptionToken)"/>
							<xforms:send submission="get-feed"/>
						</xforms:action>
					</xforms:action>
				</xforms:action>
			</xforms:submission>

			<!-- get the RDF through the administrative getRDF API -->
			<xforms:submission id="get-rdf" serialization="none" method="get"
				action="/harvester/admin/getRDF?sets={encode-for-uri(instance('control-instance')/set)}&amp;repository={instance('control-instance')/repository}" replace="instance" instance="rdf">
				<!-- upon successful execution of getRDF, post the RDF into the triplestore -->
				<xforms:send submission="post-rdf" ev:event="xforms-submit-done"></xforms:send>
				<!-- otherwise display a popup alert -->
				<xforms:message ev:event="xforms-submit-error" level="modal" value="concat(instance('control-instance')/set, ': Unable to get RDF.')"></xforms:message>
			</xforms:submission>

			<!-- post RDF into the triplestore -->
			<xforms:submission id="post-rdf" action="{instance('config')/sparql/store}?default" ref="instance('rdf')" replace="none" method="post" mediatype="application/rdf+xml">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status" value="concat(instance('control-instance')/set, ': Successfully posted to endpoint.')"></xforms:setvalue>
				<xforms:message ev:event="xforms-submit-error" level="modal" value="concat(instance('control-instance')/set, ': Failed to post to endpoint.')"></xforms:message>
			</xforms:submission>

			<!-- SPARQL queries -->
			<xforms:submission id="submit-sparqlQuery" action="{instance('config')/sparql/query}?query={encode-for-uri(instance('sparqlQuery'))}&amp;output=xml" ref="instance('sparqlResponse')"
				replace="instance" method="get">
				<xforms:message ev:event="xforms-submit-error" level="modal">SPARQL query failed.</xforms:message>
			</xforms:submission>

			<xforms:submission id="delete-graph" action="{instance('config')/sparql/update}" ref="instance('sparqlQuery')" serialization="text/plain" replace="none" method="post"
				mediatype="application/sparql-update">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">SPARQL update failed.</xforms:message>
				</xforms:action>
			</xforms:submission>

			<!-- ************************* XFORMS-MODEL-CONSTRUCT-DONE ************************** -->
			<!-- get the list of repositories from the SPARQL endpoint on xforms-model-construct-done -->
			<xforms:action ev:event="xforms-model-construct-done">
				<xforms:setvalue ref="instance('sparqlQuery')" value="instance('list-repositories')"></xforms:setvalue>
				<xforms:send submission="submit-sparqlQuery"></xforms:send>
				<xforms:action ev:event="xforms-submit-done" xxforms:iterate="instance('sparqlResponse')//res:result">
					<xforms:var name="repository" select="substring-after(context()/res:binding[@name='uri']/res:uri, '#')"></xforms:var>
					<xforms:insert context="instance('repository-list')" nodeset="./child::node()[last()]" origin="xforms:element('repository', $repository)"></xforms:insert>
				</xforms:action>
			</xforms:action>
		</xforms:model>
	</head>


	<body>
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-12">
					<xforms:group ref=".[string-length(instance('control-instance')/status) &gt; 0]">
						<div class="bg-info alert">
							<p>
								<span class="glyphicon glyphicon-info-sign"></span>
								<strong>Status:</strong>
								<xforms:output ref="instance('control-instance')/status"></xforms:output>
							</p>
						</div>
					</xforms:group>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<h1>OAI-PMH Harvester: Batch Import</h1>
					<a href="../admin/"><span class="glyphicon glyphicon-arrow-left"></span>Return to Admin</a>
					<!-- Case 1: Display the upload form when the upload-valid is false or has not been set -->
					<xforms:group ref=".[instance('control-instance')/upload-valid='false' or not(string(instance('control-instance')/upload-valid))]">
						<p>The batch import process accepts a simple XML file with a root element of 'sets' and children of 'set' that contain two required elements: 'url' of the OAI-PMH set and
							'repository', which must conform to the EAD documents @mainagencycode within the &lt;eadid&gt;. The @mainagencycode is identical to the code used by the repository metadata
							RDF URIs, which, in turn, is used as the edm:dataProvider in the ore:Aggregation in the Harvester CHO triples.</p>
						<pre style="width:50%;margin:auto"><![CDATA[<sets>
	<set>
		<url>{oai-pmh set URL}</url>
		<repository>{@mainagencycode}</repository>
	</set>
	<set>
		<url>{oai-pmh set URL}</url>
		<repository>{@mainagencycode}</repository>
	</set>
</sets>]]></pre>
						<p>To proceed with the import, upload a conformant XML file for further validation and processing.</p>
						<h2>Upload Set List</h2>
						<fr:upload ref="instance('file')">
							<xforms:filename ref="@filename"></xforms:filename>
							<xforms:mediatype ref="@mediatype"></xforms:mediatype>
							<xxforms:size ref="@size"></xxforms:size>
						</fr:upload>
						<br />
						<fr:button>
							<xforms:label>Upload</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<xforms:send submission="upload-file"></xforms:send>
								<!--get the temp file written to disk-->
								<xforms:action ev:event="xforms-submit-done">
									<xforms:setvalue ref="instance('load-sets-config')/url" value="substring-before(instance('file'), '?')"></xforms:setvalue>
									<xforms:insert nodeset="instance('sets')" origin="xxforms:call-xpl('oxf:/apps/harvester/xpl/xforms/load-sets.xpl', 'file', instance('load-sets-config'), 'data')"></xforms:insert>
									<xforms:setvalue ref="instance('control-instance')/upload-valid" if="count(instance('sets')/set) &gt; 0">true</xforms:setvalue>
									<xforms:setvalue ref="instance('control-instance')/upload-valid" if="count(instance('sets')/set) = 0">false</xforms:setvalue>
								</xforms:action>
							</xforms:action>
						</fr:button>
					</xforms:group>
					<!-- Case 2: If the uploaded XML file is well-formed and contains at least one set node, display the list of sets and the validation controls -->
					<xforms:group ref=".[instance('control-instance')/upload-valid='true']">
						<xforms:group ref="instance('sets')">
							<h2>Set List</h2>
							<!-- only display the Validate control if validation has not already been performed -->
							<xforms:group ref=".[not(set[count &gt; 0])]">
								<xforms:trigger>
									<xforms:label>Validate</xforms:label>
									<!-- show the validation dialog -->
									<xforms:dispatch ev:event="DOMActivate" target="initiate-validation-dialog" name="fr-show"></xforms:dispatch>
								</xforms:trigger>
							</xforms:group>
							<xforms:group ref=".[set[count &gt; 0]]">
								<p>Ingestion control follows the set list.</p>
							</xforms:group>
							<xforms:repeat nodeset="set">
								<!-- divs for each set are color-coded with Bootstrap classes to indicate success, failure, or warning (OAI-PMH is valid, but there are 0 CHOs) -->
								<xforms:var name="class"
									select="if(oai-valid=false() or repository-valid=false()) then 'text-danger' else if (count = 0) then 'text-warning' else if (count &gt; 0) then 'text-success' else ''"></xforms:var>
								<div class="highlight">
									<dl class="dl-horizontal {$class}">
										<dt>URL:</dt>
										<dd><xforms:output ref="url"></xforms:output></dd>
										<dt>Repository:</dt>
										<dd><xforms:output ref="repository"></xforms:output></dd>
										<xforms:group ref=".[count]">
											<dt>Count:</dt>
											<dd><xforms:group ref=".[count=0]"><span class="glyphicon glyphicon-warning-sign"></span></xforms:group><xforms:output ref="count"></xforms:output></dd>
										</xforms:group>
										<xforms:group ref=".[string-length(error-code) &gt; 0]">
											<dt>Error:</dt>
											<dd><span class="glyphicon glyphicon-warning-sign"></span><xforms:output
													value="if (error-code = '0') then 'Invalid repository code.' else if (error-code = '1') then 'OAI-PMH set URL does not yield well-formed XML.' else if (error-code='2') then 'Set URL yields XML, but not valid OAI-PMH.' else ''"
												></xforms:output></dd>
										</xforms:group>
									</dl>
								</div>
							</xforms:repeat>
							<!-- display the Ingest trigger if there is at least one set with a positive number of associated CHOs -->
							<xforms:group ref=".[set[count &gt; 0] and oai-valid='true']">
								<xforms:trigger>
									<xforms:label>Ingest CHOs</xforms:label>
									<xforms:action ev:event="DOMActivate">
										<!-- show the ingestion dialog -->
										<xforms:dispatch ev:event="DOMActivate" target="initiate-ingestion-dialog" name="fr-show"></xforms:dispatch>
									</xforms:action>
								</xforms:trigger>
							</xforms:group>
						</xforms:group>
					</xforms:group>
					<!-- ***
						initiate-validation-dialog: this is the dialog to initiate the validation process.
						Options: Negative choice: close dialog, cancel validation
							Positive choice: iterate through each set to perform validation and return a total count of CHOs. See the get-feed XForms Submission above 
							for further workflow documentation.
						*** -->
					<fr:alert-dialog id="initiate-validation-dialog">
						<fr:label>Validate Sets</fr:label>
						<fr:message>Proceed with set validation? This may take some time, depending the number of sets and whether pagination is necessary for harvesting.</fr:message>
						<fr:negative-choice>
							<fr:label>No</fr:label>
						</fr:negative-choice>
						<fr:positive-choice>
							<fr:label>Yes</fr:label>
							<xforms:action ev:event="DOMActivate">
								<!-- hide initiate-validation-dialog and show the progess-dialog -->
								<!--<xxforms:show dialog="progress-dialog"></xxforms:show>
								<xforms:dispatch target="initiate-validation-dialog" name="fr-hide"></xforms:dispatch>		-->
								<xforms:setvalue ref="instance('control-instance')/total" value="count(instance('sets')/set)"></xforms:setvalue>
								<xforms:action xxforms:iterate="instance('sets')/set">
									<xforms:var name="position" value="position()"></xforms:var>
									<xforms:var name="repository" value="context()/repository"></xforms:var>
									<xforms:setvalue ref="instance('control-instance')/count">0</xforms:setvalue>
									<xforms:setvalue ref="instance('control-instance')/current" value="$position"></xforms:setvalue>
									<xforms:setvalue ref="instance('control-instance')/set" value="context()/url"></xforms:setvalue>
									<!-- Step 1: verify that the repository in the set XML matches a repository returned from the Harvester SPARQL endpoint -->
									<xforms:action if="not(instance('repository-list')/repository = $repository)">
										<xforms:insert context="instance('sets')/set[position()=$position]" origin="xforms:element('repository-valid', false())"></xforms:insert>
										<xforms:insert context="instance('sets')/set[position()=$position]" origin="xforms:element('error-code', '0')"></xforms:insert>
									</xforms:action>
									<!-- Step 2: Get the OAI-PMH feed: Further XForms actions are implemented in the XForms Submission -->
									<xforms:action if="instance('repository-list')/repository = $repository">
										<xforms:send submission="get-feed"></xforms:send>
									</xforms:action>
								</xforms:action>
								<!--<xxforms:hide dialog="progress-dialog"></xxforms:hide>-->
							</xforms:action>
						</fr:positive-choice>
					</fr:alert-dialog>
					
					<!-- ingestion dialog -->
					<fr:alert-dialog id="initiate-ingestion-dialog">
						<fr:label>Validate Sets</fr:label>
						<fr:message>Proceed with set ingestion?</fr:message>
						<fr:negative-choice>
							<fr:label>No</fr:label>
						</fr:negative-choice>
						<fr:positive-choice>
							<fr:label>Yes</fr:label>
							<xforms:action ev:event="DOMActivate">
								<!-- iterate through sets with a count greater than 0 -->								
								<xforms:action xxforms:iterate="instance('sets')/set[number(count) &gt; 0]">
									<xforms:var name="set" select="context()/url"></xforms:var>
									<!-- Step 1: set the SPARQL query template and submit the SPARQL/Update to purge triples associated with each set -->
									<xforms:setvalue ref="instance('sparqlQuery')" value="replace(instance('purge-set-template'), 'SET', $set)"></xforms:setvalue>
									<xforms:send submission="delete-graph"/>
									<!-- Step 2: If the SPARQL/Update XForms submission is successfully, get the RDF via the admin getRDF API and post the RDF into the triplestore -->
									<xforms:action ev:event="xforms-submit-done">
										<xforms:setvalue ref="instance('control-instance')/set" value="$set"></xforms:setvalue>
										<xforms:setvalue ref="instance('control-instance')/repository" value="context()/repository"></xforms:setvalue>
										<xforms:send submission="get-rdf"> </xforms:send>
									</xforms:action>
								</xforms:action>
							</xforms:action>
						</fr:positive-choice>
					</fr:alert-dialog>
					
					<!--<xxforms:dialog id="progress-dialog" appearance="full" level="modal" close="false" draggable="false" visible="false">
						<xforms:label>Progress Update</xforms:label>
						<div style="width:400px;">
							<xforms:output value="concat(instance('control-instance')/current, ' of ', instance('control-instance')/total, ':')"></xforms:output>
							<xforms:output ref="instance('control-instance')/set"></xforms:output>
						</div>
					</xxforms:dialog>-->
					<!--<fr:xforms-inspector></fr:xforms-inspector>-->
				</div>
			</div>
		</div>
	</body>
</html>
